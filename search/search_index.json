{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Hibby's Packet Radio Guide","text":"<p>Hi, welcome - thanks for coming by! I'm Hibby and this is a collection of everything I know about packet radio, and is being assembled bit by bit!</p> <p>Warning</p> <p>This is a work in progress. Bits will be missing and added as I have time. If there is anything obviously missing, obviously wrong or that you're in dire need of, drop me an email (see about page) and I'll fix/expedite/help!</p>"},{"location":"#what-is-packet-radio","title":"What is Packet Radio?","text":"<p>Packet Radio is a niche within Amateur Radio. It combines elements of networking and the dark art of software to connect computers over a long distance without wires.</p> <p>With packet radio we can transfer information, files or messages without relying on the internet. We can control and understand every part of our link, from the computer and the software, through the modem, radio and antenna.</p>"},{"location":"#taking-your-first-steps","title":"Taking Your First Steps","text":"<p>This is a broad part of our hobby, and it can be overwhelming to get started. There are lots of interconnecting components and new terms to learn.</p> <p>Keep your eye on the glossary if the terms get confusing.</p> <p>The key things you will need are:</p> <ul> <li>An Amateur Radio License</li> <li>A radio</li> <li>An antenna</li> <li>A computer</li> <li>A modem</li> <li>A cable to interface between the computer &amp; radio</li> <li>Software</li> </ul>"},{"location":"#recommended-first-setup","title":"Recommended first setup","text":"<p>If you don't want to spend a lot of money to dip your toe in, you don't have to. The only things you'll need are a radio, a computer and a cable to interface between the two. Everything else can run as software.</p> <p>Have a look to see if you have a proven radio and install QtSoundModem and QtTermTCP to access someone else's node.</p> <p>I'd recommend trying 1200bd on VHF or UHF first, but slower modes on HF are perfectly do-able as well if you're on an island or stuck in a ditch.</p> <p>Take a look at the beginner's guide to see more detail about how to get started.</p>"},{"location":"about/","title":"About","text":"<p>Hello, I'm Hibby MM0RFN and I have compiled this to the best of my ability.</p> <p>I work on the Debian project and can be emailed via hibby at debian.org</p> <p>The things I love include Scottish Consulate &amp; 57North &amp; Bikes &amp; Hacking &amp; Debian &amp; Radio &amp; Curling &amp; \ud83c\udff3\ufe0f\u200d\ud83c\udf08 &amp; \ud83e\udd8a</p>"},{"location":"about/#thanks","title":"Thanks","text":"<p>I owe a huge debt of gratitude to a number of people for keeping my enthusiasm and excitement for Amateur Radio, Packet Radio and Debian alive over the years. I can only encourage you, dear reader, to find your own tribe of inspiration:</p> <p>Iain Learmonth, MM0ROR - irl brought me into the Debian project and fanned the flames of my enthusiasm early on, and it is entirely his fault I have this passion for free software and the work I do in Debian. We used to try to send each other packet data across a room and spent long days trying to understand why it didn't work, and these experiments have formed the foundation of my knowledge and experience. You have had more influence and impact than you know - thank you so very much for these gifts.</p> <p>Tom Jones, MM6IRQ - Tom's consistent ability to challenge my knowledge and nurture my enthusiasm for something have always been invaluable. There are very few other people I would be so happy to spend long days sat together in silence working on equally stupid ventures - for this, and many other reasons, you are my dearest friend.</p> <p>Tom Fanning M0LTE - Tom's continued enthusiasm and knowledge of packet radio has helped keep mine alive and developing during our time working on the UK Packet Radio Network project, and you've proved to be a great sounding board for when I've had a half baked idea that needs development. Your ability to get shit done and your depth of knowledge means that people really look up to you and respect what you have to say - more than you realise.</p> <p>The rest of the OARC. Y'all are a consistently fun community to be part of, and have kept the flame of my radio hobby alive for many years now - thanks to Paul M0TZO for bringing me in many years ago, and reminding me consistently of that time I was drunk in a field trying to transmit out of band. There is an exciting get-up-and-do it vibe to our community, and it has successfully overcome my natural recitence to dive in without research more than once, resulting in wonderful results.</p> <p>The HAK5 podcast for sparking the first flame and introducing me to APRS and amateur radio way back in 2005/6/7. I have fond memories of hanging out in irc, talking nonsense and taking my first steps into becoming who I am now.</p> <p>Thanks to those who've come before and wrote the software that I've spent nearly 20 years playing with for fun. The trail you all blazed with your creativity, technical prowess and determination all those years ago has gived many of us years of fun challenges and built a foundation for the future of our hobby. The depth of your understanding and technical ability will never fail to boil my head. Particular thanks to N1URO (now SK), G4KLX, G8PZT and many more who I haven't interacted with directly.</p>"},{"location":"beginners-guide/","title":"Beginner's Guide","text":""},{"location":"beginners-guide/#key-concepts","title":"Key Concepts","text":"<p>In packet radio, we connect our computers together over the air to transmit data wirelessly. As it's not as polished as Wifi (but much more fun), there are a few things you'll need to be familiar with before you can get stuck in to the network.</p>"},{"location":"beginners-guide/#equipment","title":"Equipment","text":"<p>You'll need a Radio and a computer with a cable to connect them together. Sometimes these are easy to buy online, and the more adventurous can make them. If you've done FT-8 or another data mode, you might already have this cable.</p> <p>Learn more about some Radio equipment here.</p>"},{"location":"beginners-guide/#modem","title":"Modem","text":"<p>You'll need a modem of some variety. For more advanced users this of often a piece of hardware such as a NinoTNC, but as a beginner you're likely better served with a piece of software such as QtSoundModem. As the software costs nothing and takes no time to be delivered, it's quicker to get started with! No lunch is free, however, so this simpler starting point brings with it more configuration complexity!</p> <p>Learn more about modems here</p>"},{"location":"beginners-guide/#client-software","title":"Client Software","text":"<p>You'll need a client of some form to be able to connect to the network. I would recommend QtTermTCP to start with. Again, it's free and it works with QtSoundModem, a NinoTNC and other hardware &amp; software offerings too.</p>"},{"location":"beginners-guide/#addresses","title":"Addresses","text":"<p>Every station on the network has an address. The Government issued yours when you passed your ham exam (or if you've not sat it, they will do once you pass!) - it's simply your callsign. My station, as an example, is MM0RFN on the air.</p> <p>Sometimes, when we want to offer a service from our computer, such as a messageboard or chatroom, we will add a number afterwards. We call this an SSID, a Service Set IDentifier. Due to the limitations of AX.25, we can have from number 1 to 15. </p> <p>If you want to connect to my messageboard, you can tell your client to connect straight to MM0RFN-1, or if you want to connect to my chatroom it might be MM0RFN-4. </p> <p>SSIDs are not necessary - some stations have a frontend that will let you choose what service you want to use when you connect.</p> <p>When you call your local node or a nearby station, it is most likely they will have an SSID that you'll need to use.</p>"},{"location":"beginners-guide/#modes","title":"Modes","text":"<p>Similar to normal radio, we have different Modes too. </p> <p>Instead of AM, FM, etc, we break to them down to 3 categories:</p> <ul> <li>Protocol: How our data is encoded</li> <li>Speed: How fast our data will travel</li> <li>Modulation: what manner of sound we generate to achieve communication</li> </ul> <p>Both stations must use the same protocol, speed and modulation to communicate on a shared frequency.</p> <p>You can see a good table of Protocols, Speeds and Modulations at NinoTNC once you've digested the below and feel brave!</p>"},{"location":"beginners-guide/#protocol","title":"Protocol","text":"<p>We use two main protocols: AX.25 (legacy) and IL2P (modern).</p>"},{"location":"beginners-guide/#ax25","title":"AX.25","text":"<p>AX.25 is an umbrella term often used for all packet radio, but really it refers to the specification written between the 70s and 90s that defines the basics of packet.</p> <p>It has a long legacy and is rather simple, but is reliable, embedded in a lot of old hardware and will likely be in use until the heat death of the universe.</p> <p>Learn more here.</p>"},{"location":"beginners-guide/#il2p","title":"IL2P","text":"<p>IL2P, the 'Improved Layer 2 Protocol' is by Nino KK4HEJ and is an evolution of AX.25. It includes nice things such as error correction of data and allows for, theoretically, more reliable communications but isn't compatible with AX.25 on the air.</p> <p>There are a number of varieties of IL2P in the wild too, most commonly 'With CRC' which includes a check that callsigns are valid.</p>"},{"location":"beginners-guide/#speeds","title":"Speeds","text":"<p>We often use '1200', '1200bd' or similar as shorthand for how fast our data is sending and received. The 'bd' is baud, or the number of 'symbols' transmitted a second. For most of our communications, 1 baud is equivalent to 1 bit per second, however more exotic modulation can transmit more than one symbol at a time, buying us more speed! </p> <p>We use 3 broad speed categories at the moment:</p> <ul> <li>Low - 300bd - used on HF</li> <li>Medium - 1200bd - used on VHF</li> <li>High - 9600bd - used on UHF and beyond</li> </ul> <p>Nothing comes for free, and speed is normally proportional to your channel bandwidth. 300bd fits into quite a narrow space, 5-600Hz, which is why we use it on HF. 1200bd and other medium speed up to and including 4800bd are used in 12.5kHz FM channels, so appear on VHF and UHF. 9600bd and faster need 25kHz FM and higher channels. </p>"},{"location":"beginners-guide/#modulation","title":"Modulation","text":"<p>Modulation is a little more complicated than the others as there are many ways to modulate a signal!</p> <p>If you've played with data modes on a radio already, you will have a reasonable feeling for this.</p> <p>The key modulations we use are:</p> <p>AFSK</p> <p>Audio Frequency Shift Keying - Multiple audible tones. This is commonly found on VHF, FM 1200bd links. Classic bleeps and bloops that have been heard on our frequencies for decades. Tune to 144.800MHz to get a flavour from the APRS network.</p> <p>FSK</p> <p>Frequency Shift Keying - Multiple tones, not necessarily audible. Commonly found on UHF, FM 9600bd links. This sounds quite like white noise and can be difficult to differentiate from unsquelched audio.</p> <p>PSK</p> <p>Phase Shift Keying - Data encoded into changes of phase. Often found on HF links.</p>"},{"location":"beginners-guide/#linux","title":"Linux","text":"<p>A key component of the systems I'll be discussing in this guide is Linux. If you don't have a great understanding of Linux or it's a bit scary, I've written a primer here.</p> <p>There's a lot to take in, and it can seem overwhelming at first, but feel free to read, ask for help and keep in mind that it's easy to feel lost when you approach anything new - there are just so many things to grasp.</p> <p>A simple starting point is a Raspberry Pi - it will be a dedicated computer for just packet exploration, and if everything is broken you can easily start again without losing any important data - you just rewrite the SD card and start again.</p>"},{"location":"beginners-guide/#radio-set-up","title":"Radio Set Up","text":"<p>Find out your local packet radio frequency first, and tune your radio to see if you can hear any activity. This will be a good indicator as to whether you need to think about HF instead of VHF/UHF.</p> <p>If you're in the UK, this will be listed at ukpacketradio.network or  UKRepeater.</p> <p>If information is available online, also take note of the details of the mode as this will come in handy setting up your modem.</p>"},{"location":"beginners-guide/#software-set-up","title":"Software Set Up","text":"<p>I'm going to assume that you have a NinoTNC or other KISS hardware modem. If you want to use QtSoundModem, take a look at my guide.</p>"},{"location":"beginners-guide/#installation","title":"Installation","text":"<p>If you're using Debian, Ubuntu or a Raspberry Pi it will be easiest if you install hibby's repo.</p> <p>Once you have done that you can install the prerequisites - QTTermTCP.</p> <p>If you're a new user, I recommend using a graphical 'app store' - see how here.</p> <p>If you're more Linux aware? <code>apt install soundmodem</code> in your terminal of choice!</p>"},{"location":"beginners-guide/#configure-qttermtcp","title":"Configure QtTermTCP","text":"<p>Open QtTermTCP and set up a Kiss Connection to your Modem. This will work for QtSoundModem or a physical modem.</p>"},{"location":"beginners-guide/#set-up-kiss-connection","title":"Set up Kiss Connection","text":"<p>Click Setup then KISS Configuration. You will be presented with a window that looks similar to the below:</p> <p></p> <p>Ensure 'Enable Kiss Interface' is selected, put your callsign in MYCALL and put select your modem from the 'Serial TNC' dropdown. If using a NinoTNC, the speed will be 57600.</p> <p>Press OK to save settings.</p> <p>At this stage, I recommend Monitoring the frequency to see if you can decode any information. Local stations will likely be beaconing and this is a good way to test you have set up correctly without interfering with other users transmissions.</p> <p>Decoded data shall look like:</p> <p></p>"},{"location":"beginners-guide/#connect","title":"Connect","text":"<p>Press Connect, then 'Kiss Connect' in the dropdown menu. You'll see something asking to the below - selection session, enter the callsign &amp; SSID you are trying to connect to, for example GB7HIB-7 if you're connecting to my node. Ignore digipeters for the moment - they can be a future challenge.</p> <p></p> <p>You should be presented with some choices in the bottom pane - BBS, Links, Info etc. If not, type <code>?</code> in the bottom text box, hit enter and see what the remote system returns with.</p> <p></p> <p>Congratulations, you are on the air!</p> <p>Not seeing anything in the monitor pane? Time to get debugging!</p>"},{"location":"beginners-guide/#debugging","title":"Debugging","text":"<p>This is where most of my time is spent when setting up packet radio stuff. In my opinion, it's where the real learning happens - you need to get your hands dirty with your radio, with your modem, with Linux and try to retain your sanity at the same time. </p> <p>Don't worry - there is always something you've forgotten to do, or think you've looked at and haven't. We all have that feeling. Sometimes I keep a note of what I've done and what I've looked at to avoid replication of work, or so I can note what I have changed and what I might need to replicate.</p>"},{"location":"beginners-guide/#debugging-checklist","title":"Debugging Checklist","text":"<p>Learn more about debugging:</p> <ul> <li>Your Radio</li> <li>QtSoundModem</li> </ul>"},{"location":"beginners-guide/#ask-for-help","title":"Ask for Help!","text":"<p>It is easy to feel overwhelmed and alone as you struggle through debugging your system. Feel free to ask the community for help! No question is stupid, and we all started knowing nothing about this. Everyone is excited to have new stations and nodes to connect to, so will be thrilled to offer some form of pointer, assistance, input or advice. </p> <p>Note</p> <p>Please note, advice is a form of nostalgia: dispensing it is a way of fishing the past from the disposal, wiping it off, painting over the ugly parts and recycling it for more than it's worth.</p> <p>There are a few great sources of assistance, some will be faster than others to get responses from:</p> <ul> <li>General help and chatter on all things packet: Online Amateur Radio Club Discord</li> <li>UK Packet Radio Users: uk packet radio mailing list</li> <li>QtTermTCP and QtSoundModem help: bpq32 mailing list</li> <li>XROUTER help: XROUTER mailing list</li> <li>NinoTNC: NinoTNC mailing list</li> <li>My Inbox - see the about page. I'll be thrilled if you get stuck and sent me an email saying you'd tried this and nothing worked!</li> </ul>"},{"location":"glossary/","title":"Glossary","text":"Term Translation AX.25 The underlying packet radio protocol, sometimes used as a generic term AFSK Audio Frequency Shift Keying. See Modulation BBS Bulletin Board System - an email and message service hosted on a nearby mailbox BSD Berkely System Distribution - Linux's inspiration and predecessor, a commercial (now largely open source) family of Unix distributions bd Baud - a unit of data - 1 character, used to explain the speed of a link as bauds per second CLI Command Line Interface - a text-first mode of interacting with the computer FSK Frequency Shift Keying. See Modulation IP Internet Protocol IL2P Improved Layer 2 Protocol - a new protocol to replace AX.25 over the air Kernel The Linux Kernel is the core component of Linux, common to all distributions and the only atually part technically called Linux. It's the software at the very bottom of the pile, interacting with hardware and making stuff work KISS Keep it Simple Stupid - a serial protocol to communicate with modems Linux A family of computer operating systems, alternative to Windows NET/ROM A routing and discovery layer that makes connecting to nearby and distant stations easier Node A computer in the network. It can be a full featured system with applications hosted at home or at a nearby site, or it can be a simplified system that only passes messages on behalf others Repo Repository of applications for a Linux Distribution - see Applications and Repositories PMS Personal Message System - a reduced functionality BBS hosted on your home node PSK Phase Shift Keying. See Modulation QPSK Quadrature Phase Shift Keying. PSK based on 4 different phase states. See Modulation TCP Transmission Control Porotocol. A protocol for transmitting data over an IP Link TNC Terminal Node Controller - A modem with enhanced functionality. See TNC"},{"location":"hardware/","title":"Hardware","text":""},{"location":"hardware/#modems","title":"Modems","text":""},{"location":"hardware/#ninotnc","title":"NinoTNC","text":"<p>NinoTNC is lovely</p>"},{"location":"hardware/#another","title":"Another","text":""},{"location":"hardware/#radios","title":"Radios","text":""},{"location":"hardware/#gm340","title":"GM340","text":"<p>I use this </p>"},{"location":"linux/","title":"Linux Primer","text":"<p>My packet radio guide is focussed on running software on Linux and it probably assumes a base level of knowledge. I shall dispense some thoughts and you can judge whether this is helpful.</p> <p>Note</p> <p>For those of you with greater background knowledge and opinions, you'll notice I'm painting in broad brushstrokes. This is intentional, don't bite my head off!</p>"},{"location":"linux/#what-is-linux","title":"What is Linux?","text":"<p>Linux is, in general terms, a family of operating systems that share a common core set of software and exhibit similar characteristics. It is no one simple thing, and doesn't fit in one neat category.</p> <p>It can be seen as an alternative to Windows, MacOS, DOS, FreeBSD etc on the desktop - there are many similarities and many differences.</p> <p>It is built collaboratively by enthusiast and professional software developers in the spirit of freely sharing and improving the world for all humans - in this sense, there is a strong overlap with the goals of man radio amateurs.</p> <p>Through this guide I will regularly refer to \"Debian\" - this is the 'Distribution' of Linux that I work on in my free time. A distribution is a collection of software maintained by a group of people. In the case of Debian, there's around 1000 of us. </p> <p>As the source code is available for all to see and use due to permissive licenses, if another group has an opinion which differs from the team producing a distribution, they can use our work as a foundation and build something different and new based on that - we call this 'forking'. This is what Ubuntu is, and why we refer to Ubuntu as a 'Debian Derivative'. It's also why 90% of tutorials that target Ubuntu will work for Debian and vice versa. We share common components and building blocks. Raspberry Pi OS falls into this category too - they are standing on Debian's shoulders and commonly re-base their system on ours, so that they can focus their efforts on making the Raspberry Pi work well instead of getting bogged down in tangential detail.</p> <p>An alternative to Debian and its derivatives is Fedora - while this shares many common components and code at the core of the system, some of the tools used in Fedora differ to such an extent that software built for it can't be guaranteed to run on a Debian based system - similar to Mac vs Windows.</p> <p>There are hundreds, if not thousands, of Linux Distributions all with different goals. Some are derivatives focussed on a specific task, some are very General and left to you to configure and use. Some are even delivered as code and you need to compile it from the ground up.</p>"},{"location":"linux/#desktops-and-terminals","title":"Desktops and Terminals","text":"<p>There's a common misconception that Linux is for command line users only, or that you need to be proficient in the command line to be able to drive it. This is no more true in Linux than it is for MacOS and Windows - there are a number of tasks that some may find more efficient to do via the command line interface (CLI), but there are usually multiple ways to skin the cat. </p> <p>Much of my advice will take the form of things to run in the command line, as this is often the way I interact with my computers, but I am endeavouring to diversify so things are more approachable. </p> <p>If you're running the Raspberry Pi, it's most likely you have Raspberry Pi OS with a desktop - there'll be a background, a menu in the top left etc. It might not look familiar, but to a keen explorer it should look approachable at the very least.</p> <p>If you're running Debian, during install we'll ask you what graphical desktop environment you want to install, if any. This is the desktop you boot in to - unlike Windows, there are multiples available for Linux. As a beginner, I strongly recommend KDE - it is most Windows like and is pretty full featured. If you're running Ubuntu, typically you install an Ubuntu derivative focussed on a specific desktop environment - perhaps Kubuntu for KDE.</p>"},{"location":"linux/#applications-and-repositories","title":"Applications and Repositories","text":"<p>Most Linux distributions are not only just the system and the desktop, but they are shipped with a vast catalogue of applications too. They might not be installed, and you'll need to use some sort of app store tool to install, remove etc applications. It's just like every modern mobile phone - they stole the idea from us!</p> <p>We call this tool a package manager (we often call applications 'packages'), and a collection of applications is known as a repository, or repo. The Debian family use a program called <code>apt</code> as its package manager, and it ships with quite a large repository of apps you can choose from. Most guides, mine included, don't focus on showing you a usable app-store, just a method of installing from a repository.</p> <p>You might want to add another repository if to get access to additional software, new software that isn't shipped by the distribution's maintainers or some other reason. I keep more up to date versions of software in my repository than Raspberry Pi OS offers, and I have additional software that isn't offered by RasPi OS too.</p>"},{"location":"linux/#install-from-the-command-line","title":"Install from the Command Line","text":"<p>To install from the command line, the standard command would be <code>apt install x</code> where x is any application you're looking for. This is often prefixed with <code>sudo</code>, see below in 'Users, Permissions and sudo' to learn more about why.</p>"},{"location":"linux/#graphical-app-store-frontend","title":"Graphical App Store Frontend","text":"<p>Instead of using <code>apt install x</code>, it is possible to run a graphical piece of software. </p>"},{"location":"linux/#raspberry-pi","title":"Raspberry Pi","text":"<p>The Raspberry Pi ships with a GUI through which you can install packages. It lives in the Raspberry Pi menu (top left, Raspberry Pi icon), Preferences, Add/Remove software.</p>"},{"location":"linux/#other-systems","title":"Other systems","text":"<p>Have a little look through your application launcher menu to see if there is an app catalogue, application store, package list or similar. If nothing is there, then you might need to look to install something.</p> <p>One I recommend is 'Synaptic' - you might have it installed already, or you might have to quickly run <code>apt install synaptic</code> in the command line to get yourself the software. </p> <p>On the Raspberry Pi, it's as below. To find it, go to the Raspberry Pi menu (Raspberry Icon, Top Left), Preferences and select Add/Remove software.</p> <p></p>"},{"location":"linux/#filesystem-layout","title":"Filesystem Layout","text":"<p>In a Windows system, the very top of your computer's filesystem is most often the C Drive, represented as C: commonly. Windows also neatly shows other drives as similar folder structures - CD Drives often start at D:, Floppy drives at A:.</p> <p>In Linux we follow a different filesystem hierarchy, starting at the 'root' of the drive, commonly labelled as <code>/</code>. Everything else on the system is presented as a file or a folder under <code>/</code>. This includes CD Roms, Hard drives which present as folders, serial &amp; USB devices which present as files and more.</p> <p>Paths always start with a <code>/</code>, and if it's a folder it will end with a <code>/</code> to indicate there is more depth below.</p> <p>Devices, as they present, are often named by the class of device and a number starting at 0 to indicate which number it is. You'll commonly see references to <code>eth0</code>, showing the first Ethernet device or <code>wlan0</code> showing the first wireless internet adaptor. A second would be <code>wlan1</code> etc. </p> <p>If I look at my root filesystem, I see the following folders:</p> <pre><code>\u276f ls /\nbin@   dev/  home/  lost+found/  mnt/  proc/  run/   srv/  tmp/  var/\nboot/  etc/  lib@   media/       opt/  root/  sbin@  sys/  usr/\n</code></pre> <p>Many folders won't be of interest to you day to day, but some helpful ones to know are:</p> <ul> <li><code>/dev/</code> - A folder containing devices, it's likely your modem appears here as <code>/dev/ttyACM0</code></li> <li><code>/etc/</code> - This folder contains every system configuration file, and you could think of it as similar to the Windows Registry.</li> <li><code>/home/</code> - The home folder is the equivalent to <code>C:\\Users\\</code> on Windows. <code>/home/hibby/</code> is where my files live, just like <code>C:\\Users\\Hibby</code></li> <li><code>/mnt/</code> - Often where hard drives appear as a folder. A CD Drive called <code>D:\\</code> on Windows might appear as <code>/mnt/cdrom/</code> here.</li> <li><code>/tmp/</code> - A handy scratchpad to test and download things to. It gets emptied on every reboot</li> </ul>"},{"location":"linux/#users-permissions-and-sudo","title":"Users, Permissions and 'sudo'","text":"<p>Much like other systems, Linux has the concept of a regular 'user' which you log in as, day to day and an 'administrator' user who is empowered to make configuration changes to the system, install software and so on. In the Linux world, the administrator is known as 'root'. As root has a lot of power - changing users passwords, deleting every file, overriding safe norms to damage hardware potentially - it is generally recommended that you do not log in day to day as root. If a bad actor or malicious piece of software runs while you are root, it can cause all of the aforementioned damage and more!</p> <p>Again, similar to windows, you can run a command as the root user, effectively temporarily granting access to just one program to perform a specific task. In Windows, what usually happens is a pop up window appears asking if you want to do that and pressing yes or no. In Linux, we will have configured the system in advance to know that your user is allowed to do this, and then it will ask for your password to grant permission to carry out the action. </p> <p>In graphical environments this may take the form of a pop up window - more often than not, however, we do this from the command line by prefixing our whole command with <code>sudo</code> - you can see a lot of examples of <code>sudo</code> in use at the repo page.</p> <p>Looking at the repo as an example and considering our earlier learning from Applications and Repositories above - it's no wonder that you need to carry out the commands mostly as the root user!  To add my repository, you are making a major system configuration change in two manners: </p> <ul> <li>Telling it to trust absolutely the software that I distribute</li> <li>Telling the package manager where to download that software from </li> </ul> <p>From this point on, you're placing a lot of trust in me personally - I can make quite significant changes to your system, or open up security holes, or accidentally break programs. I promise to not abuse this trust - to do so would break our Social Contract, result in me being ejected from several communities I love and I'd probably have to find a new set of hobbies.</p> <p>You can, of course, revoke this decision at any point by removing the repo key and entry in <code>/etc/apt.conf</code>.</p>"},{"location":"linux/#how-do-i-know-if-i-can-run-programs-as-root","title":"How do I know if I can run programs as root?","text":"<p>This is one for the command line! I recommend running <code>groups</code>:</p> <pre><code>\u276f groups\nhibby cdrom floppy sudo audio dip video plugdev users netdev lpadmin scanner sbuild\n</code></pre> <p>You can see in my group list that I can access the cd rom drive, the floppy drive and run things as sudo, amongst other less important groups!</p> <p>If you do not have sudo in this list, you'll need a bit more help than I can give here - time to ask for help!. If you're running a Raspberry Pi or Ubuntu, chances are that you'll be able to. Debian is a little more paranoid so we don't grant it by default. </p> <p>You'll need to run a command called <code>usermod</code> as the root user to grant your regular user a new group - <code>usermod -aG &lt;groupname&gt; &lt;username&gt;</code> effectively translates to 'add  to . Get rid of the brackets and add the user and group you're trying for! See Permissions and Groups for an example."},{"location":"linux/#editing-text-as-root","title":"Editing text as root","text":"<p>The path of least resistance for many is to use the command line - if you know what file you need to edit, you can do that quickly and directly using a command line text editor.</p> <p>The GUI offers some choices - my preferred method is below.</p>"},{"location":"linux/#gui","title":"GUI","text":"<p>I recommend installing Featherpad for this - it's lightweight and will only ask for a password when you save the file.</p> <p>If you use the KDE Desktop, Kate works and has the below functionality inbuilt.</p> <p>To install it see above for more.</p> <p>You can open Featherpad from the application launcher and use the file-&gt;open menu to get access to files all round the system:</p> <p></p> <p>Take yourself back to <code>/</code> with the Path breadcrumb at the top, and to edit the bpq32.conf config file, for example, find <code>/etc/bpq32.cfg</code>. </p> <p>On saving the file, the system will ask you to enter your password as it's a protected file that only the root user can write to:</p> <p></p> <p>Alternatively, after installing featherpad you can open your file manager, navigate to <code>/etc/</code>, open <code>bpq32.cfg</code> and the system will present a similar popup when you try to save:</p> <p></p> <p>In all these programs, you can find <code>/etc/</code> by typing <code>/etc</code> in the navigation bar that is top-central, or by Pressing 'Filesystem Root' on the left hand side and navigating to etc in the main pane.</p>"},{"location":"linux/#command-line","title":"Command Line","text":"<p>Every Debian system ships with a text editor called <code>nano</code> which is relatively approachable.</p> <p>You open your file directly, so to edit the BPQ config file, run <code>sudo nano /etc/bpq32.cfg</code>. This translates to: <code>As root user, open nano to edit /etc/bpq32.cfg</code></p> <p>Navigation is with arrow keys (no mouse, sorry!). There are a list of commands at the bottom of the screen - they use ^ as a shortcut to indicate you must press control at the same time as those letters. Similarly, M is an indication of 'meta' key, which will likely be the alt key. This is quite similar to keyboard shortcuts in Microsoft Word (ctrl&amp;s for save, alt-f4 for exit).</p> <p>Some helpful commands to know:</p> Command Action ctrl &amp; o Save ctrl &amp; x Exit ctrl &amp; w Find (helpful for quick navigation) alt &amp; u Undo alt &amp; e Redo ctrl &amp; k Cut Line ctrl &amp; u Paste Line"},{"location":"linux/#permissions-and-groups","title":"Permissions and Groups","text":"<p>Files, devices and folders can have read and write permissions tied to both a user and a group, just as in Windows. You can check this in your file manager by right clicking and selecting properties.</p> <p>In the command line, this can be checked also - to understand who can do what with a NinoTNC, plug it in and run</p> <pre><code>\u276f ls -l /dev/ttyACM0\ncrw-rw---- 1 root dialout 204, 64 Apr 11 08:32 /dev/ttyACM0\n</code></pre> <p>This can be read as the device is owned by root and accessible by the group <code>dialout</code>. This is a common group you'll see regularly for serial devices, and worth being a member of. If a device has dialout as its group, this is telling us unless your user is root or in the dialout group, you cannot use the device. </p> <p>To add your user to the dialout group, you may need to run the usermod command as mentioned above. To add my user hibby, it would be <code>usermod -aG dialout hibby</code>. As this command needs to be run as the root user, we probably need to run <code>sudo usermod -aG dialout hibby</code>. </p> <p>For this change to take effect, you will need to log out and log in again.</p>"},{"location":"repo/","title":"Hibby's Repo","text":""},{"location":"repo/#script","title":"Script","text":"<p>The script requires downloaded, set to executable and run and is a little simpler than the manual setup - thanks to John M5ET for writing it!</p> <p>I strongly recommend you read through it before running it - it should look similar to the manual method below. General computer security advice is to not blindly run scripts you downloaded from the internet! </p> <p>Download the script from: https://guide.foxk.it/static/files/setup.sh.</p> <p>This, sadly, must be run in the command line - the lines to run it are:</p> <pre><code>cd /tmp\nwget https://guide.foxk.it/static/files/setup.sh\nchmod +x /tmp/setup.sh\nsudo bash /tmp/setup.sh\n</code></pre>"},{"location":"repo/#install-signing-key","title":"Install Signing Key","text":"<p>First, you need tell your machine to trust the signature I verify the packages with:</p> <pre><code>wget -q https://online-amateur-radio-club-m0ouk.github.io/oarc-packages/hibby.key\nsudo mv hibby.key /etc/apt/trusted.gpg.d/hibby.asc\n</code></pre> <p>You can trust this key - it is contained in Debian and signed as trusted by other developers in the project.</p>"},{"location":"repo/#set-up-repo","title":"Set up Repo","text":"<p>Then you need to add the repo for your OS:</p>"},{"location":"repo/#ubuntu-2404-lts-amd64","title":"Ubuntu 24.04 LTS amd64","text":"<p><code>sudo sh -c 'echo \"deb https://online-amateur-radio-club-m0ouk.github.io/oarc-packages noble main\" &gt;&gt; /etc/apt/sources.list'</code></p>"},{"location":"repo/#ubuntu-2204-lts-amd64","title":"Ubuntu 22.04 LTS amd64","text":"<p><code>sudo sh -c 'echo \"deb https://online-amateur-radio-club-m0ouk.github.io/oarc-packages jammy main\" &gt;&gt; /etc/apt/sources.list'</code></p>"},{"location":"repo/#raspberry-pi-os-12-bookworm","title":"Raspberry Pi OS 12 - 'Bookworm'","text":"<p><code>sudo sh -c 'echo \"deb https://online-amateur-radio-club-m0ouk.github.io/oarc-packages bookworm main\" &gt;&gt; /etc/apt/sources.list'</code></p>"},{"location":"repo/#raspberry-pi-os-11-bullseye","title":"Raspberry Pi OS 11 - 'Bullseye'","text":"<p><code>sudo sh -c 'echo \"deb https://online-amateur-radio-club-m0ouk.github.io/oarc-packages bullseye main\" &gt;&gt; /etc/apt/sources.list'</code></p>"},{"location":"repo/#debian-13-amd64","title":"Debian 13 amd64","text":"<p><code>sudo sh -c 'echo \"deb https://online-amateur-radio-club-m0ouk.github.io/oarc-packages testing main\" &gt;&gt; /etc/apt/sources.list'</code></p>"},{"location":"repo/#debian-12-amd64","title":"Debian 12 amd64","text":"<p><code>sudo sh -c 'echo \"deb https://online-amateur-radio-club-m0ouk.github.io/oarc-packages bookworm main\" &gt;&gt; /etc/apt/sources.list'</code></p>"},{"location":"repo/#update","title":"Update","text":"<p>Once the repo is setup, refresh your package lists and we're good to go:</p> <pre><code>sudo apt update\n</code></pre>"},{"location":"software/","title":"What are my choices?","text":"<p>Currently the choices for software boil down to 3 major stacks</p>"},{"location":"software/#linbpq","title":"LinBPQ","text":"<p>LinBPQ is written by John G8BPQ and allows a computer to act as a node in a NET/ROM and AX.25 network. It is being actively developed with both new features and bugfixes being rolled out on a regular basis.</p> <p>It offers the following applications:</p> <ul> <li>BBS</li> <li>Chat</li> </ul> <p>For details on how to use it:</p> <ul> <li>Installation information can be found here.</li> <li>Configuration can be found here.</li> <li>The project website can be found here</li> </ul>"},{"location":"software/#xrouter","title":"XROUTER","text":"<p>XROUTER is written by Paula G8PZT and allows a computer to act as a node in a NET/ROM and AX.25 network. It is being actively developed with new features and bug fixes.</p> <p>It offers the following applications:</p> <ul> <li>Chat</li> <li>Personal Message Server</li> </ul> <p>For details on how to use it:</p> <ul> <li>Installation information can be found here.</li> <li>Configuration can be found here.</li> <li>The project website can be found here</li> </ul>"},{"location":"software/#linux-native-stack","title":"Linux Native Stack","text":"<p>The Linux native AX.25 stack has been authored by many over the years, and is shipped as a standard part of Debian.</p> <p>It comprises kernel modules and userland code, and is not bundled as a single big monolithic application.</p> <p>The system offers the following applications:</p> <ul> <li>Node frontend via Uronode</li> <li>BBS via FBB</li> <li>Bash or any other terminal with axspawn</li> <li>Many applications with axwrapper</li> </ul> <p>For details on how to use it:</p> <ul> <li>Installation information can be found here.</li> <li>Configuration can be found here.</li> </ul>"},{"location":"clients/qtttcp/","title":"QtTermTCP","text":""},{"location":"clients/qtttcp/#set-up-repo","title":"Set Up Repo","text":"<p>If you have not already done so, set up the repo as shown here.</p>"},{"location":"clients/qtttcp/#install","title":"Install","text":"<p>To install QtTermTCP from the repo, run the below commands:</p> <pre><code>sudo apt update\nsudo apt install qttermtcp\n</code></pre>"},{"location":"clients/qtttcp/#first-run","title":"First Run","text":"<p>From your application menu, open the hamradio menu and highlight QtTermTCP.</p> <p>The terminal is split into 3 key panes - a monitor window, a terminal scrollback and an input line.</p>"},{"location":"clients/qtttcp/#monitor-pane","title":"Monitor Pane","text":"<p>The monitor pane allows you see traffic from your modems or AX.25 ports as it is received and sent.</p> <p>This pane can be scrolled to see historic traffic, and it will allow you to monitor NET/ROM NODES broadcasts, what you are sending and receiving (to compare with the terminal pane below) and if information is corrupt.</p>"},{"location":"clients/qtttcp/#terminal-pane","title":"Terminal Pane","text":"<p>The terminal pane presents received data after your computer has acknowledged receipt to the remote computer. This might be the interactive menu of the remote station, the list of bulletins on a messageboard or live chat.</p> <p>This data may be incomplete, and is displayed as soon as packets are received and decoded. It often leads to part of a menu being displayed - keep an eye on the monitor to see what and if is going to/from your radio.</p>"},{"location":"clients/qtttcp/#input-pane","title":"Input Pane","text":"<p>The input pane is where you interact with the remote computer. An entry in here, followed by the return key, will be sent to the computer you are interacting with. Commands often take the form of a single letter or short entry like <code>bbs</code> or <code>chat</code> at a remote system's menu, or <code>lm</code> (list mine) or <code>sp MM0RFN</code> (send personal message to MM0RFN).</p> <p>Pressing up in this pane might recall previous commands you have input.</p>"},{"location":"clients/qtttcp/#bpqnode-integration","title":"BPQNode Integration","text":"<p>QtTermTCP pairs very well with BPQ as a command and control method and is worth trying.</p>"},{"location":"clients/qtttcp/#setup","title":"Setup","text":"<p>Configure a connection to BPQ by selecting the 'Setup' menu, Hosts and any of the host entries in the menu that appears.</p> <p>I assume you are connecting to a local BPQ Node, so I recommend the following settings, where the User and Password are the telnet access details you configured during the first set up of your BPQ Node.</p> Config Setting Host Name 127.0.0.1 Port 8011 User Password Session Name BPQ Local"},{"location":"clients/qtttcp/#helpful-hints","title":"Helpful Hints","text":"<p>Select the AX.25 ports that LinBPQ presents you in the Monitor Pane by selecting monitor from the menu and selecting some ports. This means you don't need to enter <code>listen 2</code> to see feedback from port 2, as an example, and you can monitor what is happening when you try to connect through that port.</p>"},{"location":"clients/qtttcp/#kiss-setup","title":"KISS Setup","text":"<p>KISS set up allows you to use a modem directly with QtTermTCP as a lightweight client with any modem that presents a KISS Interface. This can be both KISS by serial or kiss by IP.</p>"},{"location":"config/bpq/","title":"BPQ","text":"<p>I assume you have already installed bpq from the repo.  </p>"},{"location":"config/bpq/#configuration-file","title":"Configuration File","text":"<p>The configuration file I ship in the repo, there are hopefully some obvious fields to fill out. Once all the below holes are filled, you should be able to log in either with QtTermTCP or in your web browser at 127.0.0.1:8008, assuming you're on the same computer as the node. </p> Field Example Purpose NODECALL MM0RFN The callsign your node shall identify as NODEALIAS RFNNOD The alias a calling NET/ROM station can use to connect directly to you LOCATOR IO87dc A 6 figure Maidenhead square where you are PASSWORD test123 A sysop password for configuration activities AUTOSAVE 1 Autosave the NET/ROM Nodes Table on shutdown NODESINTERVAL 30 Interval between NET/ROM NODES broadcasts in minutes MINQUAL 50 The minimum quality of NET/ROM node included in your NODES broadcasts. CTEXT <code>Hi you look great! ***</code> Text displayed when a user connects"},{"location":"config/bpq/#ports","title":"Ports","text":"<p>Port configs in BPQNode aren't too complicated. A common Gotcha is that you configure a port specific broadcast and end up double-broadcasting, both the node master broadcast and the port specific one. </p>"},{"location":"config/bpq/#kiss","title":"KISS","text":"<p>A common port entry for a NinoTNC specifically (but also, more generally, a KISS Modem) looks like:</p> <pre><code>PORT\n  PORTNUM=1\n  ID=VHF\n  TYPE=ASYNC\n  PROTOCOL=KISS\n  KISSOPTIONS=ACKMODE\n  COMPORT=/dev/ttyACM0\n  SPEED=57600\n  FRACK=4000\n  PACLEN=150\n  DIGIFLAG=0\n  QUALITY=192\n  MINQUAL=20\nENDPORT\n</code></pre> <p>Key settings to observe are the <code>COMPORT</code>, which should be the serial port of the device, and <code>SPEED</code>. For a NinoTNC this is always 57600, but for QtSoundModem, Direwolf or older hardware may be 9600 or something else. Check your modem configuration!</p> <p><code>QUALITY</code> sets the assumed quality of connections coming in - I recommend higher quality (up to 200) for higher speed links. Setting this to 0 will disable NET/ROM on the port, and this is current recommended standard practise on HF within the UK Packet Radio Network.</p>"},{"location":"config/bpq/#telnet","title":"Telnet","text":"<p>BPQ's Telnet Port sets the TCP Ports for Telnet, FBB and HTTP connetions, alongside the username and password. This will come in useful when using QtTTCP as a monitor and control application.</p> <pre><code>PORT\n  PORTNUM=9\n  ID=Telnet\n  DRIVER=Telnet\n  CONFIG\n    LOGGING=1\n    CMS=1\n    DisconnectOnClose=1\n    TCPPORT=8010\n    FBBPORT=8011\n    HTTPPORT=8008\n    LOGINPROMPT=user:\n    PASSWORDPROMPT=password:\n    MAXSESSIONS=10\n    CTEXT=Thanks for connecting\\n Enter ? for list of commands\\n\\n\n    USER=username,xxxxxxxx,m0aaa,,SYSOP\nENDPORT\n</code></pre> <p><code>USER</code> is the key configuration to change here - change <code>username</code> to your desired administrator username,  <code>xxxxxxx</code> to the password and <code>m0aaa</code> to the callsign of the administrator.</p>"},{"location":"config/bpq/#mail-configuration","title":"Mail Configuration","text":"<p>Mail configuration isn't easy to get your head round! I'm still not clear on it all, and I think many others are in the same boat. It's done through the browser instead of on the command line, which makes it slightly more approachable.</p> <p>Navigate to http://localhost:8008, assuming your HTTPPORT is set to 8008 and you're on the same machine. This will present you with the below view:</p> <p></p> <p>Select 'Mail Mgmt' and log in with the details you put in <code>USER</code>. The starting point here is 'Configuration'.</p>"},{"location":"config/bpq/#configuration-to-send-receive","title":"Configuration to Send &amp; Receive","text":"<p>The configuration tab is your starting point. You need a 'Hierarchical' address, this will tell other systems where you are and help the network send things to you. It's similar to the domain of your email, like <code>@gmail.com</code>.</p> <p>Set your BBS call - this will either be your personal callsign or an allocated GB7xxx series callsign from the ETCC.</p> <p>Hierarchical addresses in the UK take the following format:</p> <p><code>#xx.GBR.EURO</code></p> <p>Where xx is a number that defines your region. You can find your region with this map.</p> <p>I recommend unticking <code>Send System Msgs to SYSOP call</code> and ticking <code>Don't hold Messages From New Users</code>.</p>"},{"location":"config/bpq/#forwarding-to-neighbours","title":"Forwarding to Neighbours","text":""},{"location":"config/bpq/#users","title":"Users","text":""},{"location":"config/linux/","title":"Linux Native AX.25 Stack","text":"<p>For Debian-alikes, see installation instructions.</p> <p>Each of the below components are required to make the complete node, but they are (generally) not all interdependent, and most of the unique components will work to make a stripped down version.</p>"},{"location":"config/linux/#axports","title":"axports","text":"<p>Setting up basic AX.25 on Debian is relatively simple - the key file to edit here is <code>/etc/ax25/axports</code>. </p> <p>GB7HIB currently runs the following below config. Each port has been given an internal reference, I like to detail what connection they are providing. Other people map them out by number or other methods, but I find having a pretty consistent set of references to the radio/interface I'm using keeps my brain in check. </p> <p>The callsign&amp;SSID is, in this case, the physical address for the port, akin to a MAC address on ethernet. It shows under <code>ifconfig</code> as a mac address for the link.</p> <p>Speed is the speed of the serial port on the interface. In the case of the NinoTNC, this is 57600.</p> <p>Paclen is the packet length - for V/UHF links, 255 bytes is a nice length. For HF, 60-80 is more common. It means for shorter packets that aren't as likely to be impacted by changes in propagation.</p> <p>Window is the number of packets that can be sent in one burst. The more reliable the link,the higher the number. This is limited by the version of ax25 you're running - 2.0 has a lower window than 2.0. If you're running Linux, at the moment you're on ax25 2.0.</p> <pre><code>hibby@raspberrypi:~ $ cat /etc/ax25/axports\n# /etc/ax25/axports\n#\n# The format of this file is:\n#\n# name callsign speed paclen window description\n#\nuhf GB7HIB-10   57600   255 2   UHF 9600bd\nip  GB7HIB-11   115200  255 7   IP\n</code></pre>"},{"location":"config/linux/#kissattach","title":"kissattach","text":"<p><code>kissattach</code> binds the axport to a physical kiss device.</p> <p>I attach my UHF port to my NinoTNC with: <code>kissattach /dev/ttyACM0 uhf</code></p>"},{"location":"config/linux/#axcall","title":"axcall","text":"<p>With the basic port configured, you can use <code>axcall</code> to place a call. </p> <p><code>hibby@raspberrypi:~ $ axcall uhf gm0nrt-7</code> calls my neighbour bill over layer 2/ax.25 point to point.</p> <p>You can go via someone too as a digipeter, <code>axcall uhf gm0cqv-7 via gm0nrt</code> calls gm0cqv using gm0nrt as a digipeter!</p>"},{"location":"config/linux/#ax25ipd","title":"ax25ipd","text":"<p><code>ax25ipd</code> manages point to point links over the internet between myself and other stations. These can be UDP and TCP. In effect, we are creating a virtual modem to handle communication with other stations, just like we are doing with software or hardware modems when dealing with 'real radios'.</p> <p>There are a couple of parts needed to make this work as an interface on my system - <code>socat</code>, <code>ax25ipd</code> and <code>kissattach</code>. </p> <p>This can be a little abstract, but the mode of interaction as is follows:</p> <p>We create a virtual modem with <code>ax25ipd</code>, a virtual pipe with <code>socat</code> that lets us connect to it similar to a physically attached modem and then run <code>kissattach</code> to make that relationship.</p>"},{"location":"config/linux/#socat","title":"socat","text":"<p>I create a socket pair to connect <code>ax25ipd</code> and <code>kissattach</code> to connect the <code>ip</code> ax25 port to the axudp tunnel.</p> <p>The command I run for this is: <code>socat -d -d -ly pty,raw,echo=0,link=/var/ax25/pty/axip1 pty,raw,echo=0,link=/var/ax25/pty/axip2</code></p> <p>If you are copying this, you might need to make the <code>/var/ax25/pty</code> - <code>mkdir -p /var/ax25/pty</code></p> <p>This is brought up at boottime by systemd:</p> <pre><code>hibby@raspberrypi:~ $ cat /etc/systemd/system/kiss-socat-axip.service\n[Unit]\nDescription=Socat interconnect for AX25 AXIP\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nWorkingDirectory=/var/ax25\nExecStart=socat -d -d -ly pty,raw,echo=0,link=/var/ax25/pty/axip1 pty,raw,echo=0,link=/var/ax25/pty/axip2\nExecStartPost=/usr/bin/bash -c 'while ! [ -h /var/ax25/pty/axip2 ]; do sleep 1 ; done'\nExecStopPost=rm /var/ax25/pty/axip1 /var/ax25/pty/axip2\n\n[Install]\nWantedBy=multi-user.target \n</code></pre>"},{"location":"config/linux/#ax25ipdconf","title":"ax25ipd.conf","text":"<p><code>ax25ipd.conf</code> is the core configuration file for this component. Below you can see that I connect to udp port 10095 of the remote station, and locally ax25ipd is in 'tnc' mode, binding to the previously created <code>axip1</code>. The route allows broadcasts <code>b</code> and is my default route <code>d</code>.</p> <p>I beacon what the station is periodically, and I also allow NET/ROM NODES broadcasts and FBB broadcasts to go over the link.</p> <pre><code>hibby@raspberrypi:~ $ cat /etc/ax25/ax25ipd.conf\nsocket udp 10095\nmode tnc\ndevice /var/ax25/pty/axip1\nspeed 115200\nloglevel 2\nbeacon after 3600\nloglevel 2\nbtext ax25ip -- hibby/GB7HIB-2 -- AXIP Interface\nbroadcast QST-0 NODES-0 FBB-0\nroute MM3NDH 10.13.37.2 bd\n</code></pre>"},{"location":"config/linux/#running-ax25ipd","title":"Running ax25ipd","text":"<p>This is run from the command line as follows:</p> <p><code>ax25ipd</code></p>"},{"location":"config/linux/#kissattach_1","title":"kissattach","text":"<p>We need to attach the axip port to the virtual modem we've created with ax25ipd once it's running, and this is a simple case of:</p> <p><code>kissattach /var/ax25/pty/axip2 axip</code></p>"},{"location":"config/linux/#netrom","title":"NET/ROM","text":"<p>NET/ROM covers functionality analogous to OSI layer3/layer 4.</p> <p>What it means in reality is that my node has a knowledge of its neighbours and what their neighbours are, and automates routing calls. To use the earlier example, I can call directly to gm0cqv and my machine will know the best path - </p> <p><code>axcall nrnod GM0CQV-7</code></p> <p>Each NET/ROM sends a 'NODES' broadcast periodically. This details what systems it can hear, what the gateway to the remote nodes is and a 'quality' value. Nodes on the network can have an alias too - GM0CQV's node on -7 above is PTRNOD, so I can do the following -</p> <p><code>axcall nrnod PTRNOD</code></p> <p>and end up at the same location.</p> <p>NET/ROM ports are largely independent of ax25 ports in that a user can call any given nrport without going through a specific axport. You can essentially define per-application nrports, and as many as you wish (assuming you have free unique SSIDs to offer them as mac addresses).</p>"},{"location":"config/linux/#nrports","title":"nrports","text":"<p><code>/etc/ax25/nrports</code>,similar to axports, defines the netrom ports the system has available. I expect primary incoming connections to be through netrom, so mine are lower numbered. </p> <p>netrom ports should not share SSID numbers with axports. This will make your system rather unstable. </p> <pre><code>hibby@raspberrypi:~ $ cat /etc/ax25/nrports\n# /etc/ax25/nrports\n#\n# The format of this file is:\n#\n# name callsign alias paclen description\n#\nnrnod   GB7HIB-1  HIBNOD        235     Netrom node Port\nnrbbs   GB7HIB-2  HIBBBS        235     Netrom BBS Port\n</code></pre> <p>I have a port for my service, the callsign and port, and an up to 6 letter alias for the service. The packet length is 20 bytes shorter than the ax25 packet to account for overheads, and then there's a wee description. </p>"},{"location":"config/linux/#nrbroadcast","title":"nrbroadcast","text":"<p><code>/etc/ax25/nrbroadcast</code> defines how often <code>netromd</code> sends a NODES broadcast and what port it sends them over.</p> <p>It also defines the default quality of stations received directly over that port, the worst quality it will broadcast, how long without hearing a nodes broadcast the station will remain in your routing table. </p> <p>I have set some sensible defaults, things that come over the ip link are quite high, but I limit the worst quality so that my NODES table isn't too big.</p> <pre><code>hibby@raspberrypi:~ $ cat /etc/ax25/nrbroadcast\n# /etc/ax25/nrbroadcast\n#\n# The format of this file is:\n#\n# ax25_name min_obs def_qual worst_qual verbose\n#\nuhf     5       192     100     1\nip      3       200     130     1\n</code></pre>"},{"location":"config/linux/#nrattach","title":"nrattach","text":"<p>Like AX.25, we need to attach the port to a device - our tool for this is <code>nrattach</code>.</p> <p><code>nrattach</code> is simple - you nrattach a port and that's it. </p> <p><code>nrattach nrnod</code> </p>"},{"location":"config/linux/#netromd","title":"netromd","text":"<p><code>netromd</code> handles incoming and outgoing broadcasts.</p> <p>I should really make this systemd unit come up after nrattach.</p> <p>I run it as <code>netromd -i -l -d -t 30</code>, which broadcasts almost immidiately, creates debug logs and broadcasts every 30 minutes.</p>"},{"location":"config/linux/#ax25d","title":"ax25d","text":"<p>ax25d is the Daemon that routes incoming connection requests and spins up a process for the caller.</p> <p>Interestingly, it isn't tied to the incoming port that the call is coming through, so you can have any port or interface handle calls to any callsign, alias or other word. </p> <p><code>/etc/ax25/ax25d.conf</code> is the config file that controls this, and it handles ax25 ports and netrom ports slightly differently. The default config we ship with debian is full of great examples, see online here - mine is configured as below. </p> <p>Reading it, you can see that GB7HIB is in [] and nrnod is in &lt;&gt;. They define the type of port.  This means if you connect to GB7HIB over ax25, you get uronode. If you connect to HIBNOD, or GB7HIB-1 over netrom, you get uronode! </p> <p>I am really interested in exploring some other applications, including <code>axspawn</code>, which lets you spawn a bash (or other) shell and effectively gives shell access over ax25/netrom to a user.</p> <p>There's lots of options here, and it's an incredibly flexible piece of software and is the core of why the Linux stack is so interesting to me. You can present any binary on your system to a connecting user!</p> <pre><code>hibby@raspberrypi:~ $ cat /etc/ax25/ax25d.conf\n# /etc/ax25/ax25d.conf\n#\n# ax25d Configuration File.\n#\n# AX.25 Ports begin with a '['.\n#\n[GB7HIB via uhf]\nNOCALL   * * * * * *  L\ndefault  * * * * * *  - root  /usr/sbin/uronode uronode\n#\n[GB7HIB via ip]\nNOCALL   * * * * * *  L\ndefault  * * * * * *  - root  /usr/sbin/uronode uronode\n#\n# NET/ROM Ports begin with a '&lt;'.\n#\n&lt;nrnod&gt;\nNOCALL  * * * * * *  L\ndefault * * * * * *  -  root  /usr/sbin/uronode uronode\n#\n</code></pre>"},{"location":"config/linux/#running-ax25d","title":"Running ax25d","text":"<p>This is an easy one to start - </p> <p><code>ax25d</code></p>"},{"location":"config/linux/#uronode-frontend","title":"Uronode Frontend","text":"<p>I use uronode both as a frontend for users connecting and for me connecting to the node and to neighbouring stations, essentially over telnet. When someone connects to my system, Uronode generates the menu that they see.</p> <p>I also have it configured as my local client - i can run <code>uronode</code> in a terminal and be presented with a helpful control interface.</p>"},{"location":"config/linux/#uronodeconf","title":"uronode.conf","text":"<p>This is the core config file for uronode that details what uronode can do. I'm running mine very stripped back, and have cut a lot of the defaults out:</p> <p>You can see the BBS command is just a uronode call out to GB7HIB-2 over netrom, and there are external commands for netstat and the 'nodesearch' program I quite like. </p> <p>The rest is pretty much default.</p> <pre><code>hibby@raspberrypi:~ $ cat /etc/ax25/uronode.conf\n# /etc/ax25/uronode.conf - URONode example configuration file\n#\n# see uronode.conf(5)\n# \"Local\" network.\n# This is your local amprnet subnet in full. Do NOT use 44.0.0.0/8!\n\nLocalNet        10.66.66.0/24\n\n# Command aliases. See uronode.conf(5) for the meaning of the uppercase\n# letters in the name of the alias. Examples below:\nAlias           BBS     \"c GB7HIB-2\"\n# External commands. See uronode.conf(5) for the meaning of the uppercase\n# letters in the name of the extcmd.\n#\n# Flags:        1       Run command through pipe\n#               2       Reconnected flag\n#               3       Run through pipe and reconnect\n#\nExtCmd          NEtstat 3       nobody  /bin/netstat netstat --ax25 --netrom\nExtCmd          NSearch 3       root    /usr/local/bin/nodesearch nodesearch %1\n\n# Node ID.\n# This displays before all output texts when the user connects into\n# your node via NetRom. Set to \"\" to leave blank.\n# Note: This -must- be defined or will display as \"(null)\". A space\n# is hardcoded in. Example: UROHUB:N1URO-2 do NOT add the bracket\n# afterwards \"}\" this is predefined in URONode.\n#\nNodeId          HIBNOD:GB7HIB-1\n\n# Ax25/Flex ID.\n# This displays before some strings and at logout to the end user when\n# they connect in via ax25 as defined in your ax25d.conf file. If\n# you don't define this \"(null)\" will be presented to the end user. Its\n# suggested you take this from your ax25d config which either faces a\n# flexnet system OR your 2-meter user interface. Note: do NOT make this\n# ssid the same as your NetRom SSID here or in ax25d.conf.\n\nFlexId          GB7HIB-10\n\n# Netrom port name. This port is used for outgoing netrom connects.\n\nNrPort          nrnod\n\nReConnect on\n\n# Syslog Logging level - suggest leaving this at 3 for debugging. 0\n# halts logging.\n\nLogLevel        3\n\nPassPrompt \"yes\"\n\n# The default escape character (CTRL-T)\n#\nEscapeChar      ^T\n</code></pre>"},{"location":"config/linux/#other-uronode-config-files","title":"Other Uronode Config Files","text":"<p>I have modified some other files that are worth highlighting -</p>"},{"location":"config/linux/#uronodeperms","title":"uronode.perms","text":"<p>I have added the below line which allows me to login without password from the localhost by starting from shell and gets me nice colours! </p> <p><code>mm0rfn  host    *       *       255</code></p>"},{"location":"config/linux/#uronodeannounce","title":"uronode.announce","text":"<p>This has local announcements in it!</p>"},{"location":"config/linux/#uronodeinfo","title":"uronode.info","text":"<p>This has information about the system in it</p>"},{"location":"config/linux/#uronodemotd","title":"uronode.motd","text":"<p>This is the welcome message displayed on every login</p>"},{"location":"config/linux/#uronodeusers","title":"uronode.users","text":"<p>This defines shell access for me as a sysop. I've never actually spawned a shell from uronode, but apparently it's possible?!</p>"},{"location":"config/linux/#uronode-as-a-local-interface","title":"Uronode as a local interface","text":"<p>I use uronode as my local packet radio terminal - instead of turning on and typing <code>axcall nrnod salbbs</code> to get to gm0nrt, I log in, type uronode, feed it my callsign and I am met with the uronode command interface, from which I can type <code>c salbbs</code>. It's a much nicer place to be!</p> <p>This required <code>xinetd</code> for me to set up easily.</p>"},{"location":"config/linux/#xinetd-config","title":"xinetd config","text":"<p>I think the below two config files are the only things required to make uronode listen on port 3964 - </p> <p><code>xinetd</code> must be enabled and started by systemd to be listening (<code>systemctl enable xinetd</code>, <code>systemctl start xinetd</code>)</p> <p>There is probably a systemd native way of doing this, but I couldn't see that in the docs.</p> <pre><code>hibby@raspberrypi:~ $ cat /etc/xinetd.d/uronode\nservice uronode\n{\n        disable         = no\n        socket_type     = stream\n        protocol        = tcp\n        user            = root\n        server          = /usr/sbin/uronode\n        wait            = no\n        instances       = 20\n}\n</code></pre> <pre><code>hibby@raspberrypi:~ $ cat /etc/services | grep uronode\nuronode         3694/tcp                        # Uronode\n</code></pre>"},{"location":"config/linux/#fbb-bbs","title":"FBB BBS","text":"<p><code>fbb</code> is my BBS software of choice! It is an oddity in that it binds directly to the ports you tell it exist, so it's listening on my ax25 and netrom ports without an entry in <code>ax25d.conf</code>. This mostly seems like magic to me and I am happy to let it run this way!</p> <p>It has a few config files - fbb.conf, which is populated by the first run, <code>ports.sys</code> which defines the ports available and then <code>bbs.sys</code> and <code>forward.sys</code> which defines how you route to the outside world. </p>"},{"location":"config/linux/#portssys","title":"ports.sys","text":"<p>My reference for this file was this website, which was a helpful resource!</p> <p>I have incremented the number of TNCs where appropriate and added my ports as 1,2,3. I have left the COM 1 Interface 9 etc alone. </p> <pre><code>hibby@raspberrypi:~ $ cat /etc/ax25/fbb/port.sys\n# FBB7.0.11\n#\n#Ports TNCs\n 1     3\n#\n#Com Interface Adress (Hex) Baud\n 1   9         ****            9600\n#\n#TNC NbCh Com MultCh Pacln Maxfr NbFwd MxBloc M/P-Fwd Mode  Freq\n 0   0    0   0     0     0     0     0      00/01   ----  File-fwd.\n 1   8    1   uhf     250   2     1     10     00/15   XUWYL 433.6250\n 2   8    1   ip    250   2     1     10     00/15   XUWYL ip port\n 3   8    1   nrbbs    236   2     1     10     00/15   XUWYL netrom port\n#\n# End of file.\n#\n</code></pre>"},{"location":"config/linux/#bbssys-forwardsys","title":"bbs.sys, forward.sys","text":"<p>The Documentation is the best reference I've got for it, and I can't improve upon it.</p>"},{"location":"config/linux/#running-everything","title":"Running Everything","text":"<p>I used to use systemd to bring things up, but now I run it with a bash script run as root:</p> <pre><code>#!/bin/bash\necho -n 'Creating socat sockets...'\nsocat -d -d -ly pty,raw,echo=0,link=/var/ax25/pty/axip1 pty,raw,echo=0,link=/var/ax25/pty/axip2 &amp;\nsleep 1\necho Done\necho -n 'Starting ax25ipd'\nax25ipd\nsleep 1\nkissattach /dev/ttyACM0 uhf\nkissattach /var/ax25/pty/axip2 ip\nkissparms -c 1 -p uhf\nkissparms -c 1 -p ip\nsleep 1\necho 'Done'\necho -n 'Bringing up NET/ROM runtime...'\nmodprobe netrom\nnrattach nrnod\nnrattach nrbbs\nnrattach nrterm\nnetromd -i -l -d -t 30\necho -n Starting mheard daemon...\nmheardd -l\necho Done\necho -n Starting ax25 daemon...\nax25d -l\necho Done\necho -n 'Starting fbb'\nsudo fbb -f -l /home/hibby/fbb.log\necho Done\n</code></pre>"},{"location":"config/xrouter/","title":"Configure XROUTER","text":"<p>Warning</p> <p>More to follow</p>"},{"location":"detail/ax25/","title":"AX.25","text":"<p>Warning</p> <p>Details to follow</p>"},{"location":"detail/il2p/","title":"IL2P","text":"<p>Warning</p> <p>More to follow</p>"},{"location":"equipment/","title":"About Equipment","text":"<p>This section will hold information on antennas, radios and perhaps coax.</p>"},{"location":"equipment/antennas/","title":"Antennas","text":"<p>There are a huge number of antennas available, commercially as well as DIY that can get you on the air.</p>"},{"location":"equipment/antennas/#vuhf","title":"V/UHF","text":"<p>For VHF, it's quite common to use a 'white stick' colinear at home - they generally buy you a few dB over a dipole to help your range and are built to handle permanent, exposed installation for a number of years.</p> <p>For multiband antennas like most colinears on the market, you can run two bands simultaneously - you need a unit that interfaces multiple radios to the single antenna known as a diplexer. This will prevent RF from/to other bands from running down the coax to damage your radios.</p> <p>In my station, I use a Diamond V-2000 with an MX-2000 triplexer.</p>"},{"location":"equipment/antennas/#hf","title":"HF","text":"<p>The most basic system is a dipole of some variety.</p>"},{"location":"equipment/ft-7900/","title":"Yaesu FT-7900","text":"<p>The FT-7900 is an 2m &amp; 70cm radio manufactured by Yaesu from 2010 to the present day.</p>"},{"location":"equipment/ft-7900/#bands","title":"Bands","text":"Band Power Modulation 2m 0 - 50W FM 70cm 0 - 40W FM"},{"location":"equipment/ft-7900/#interface","title":"Interface","text":"<p>Yaesu Mini DIN</p>"},{"location":"equipment/ft-7900/#settings","title":"Settings","text":""},{"location":"equipment/ft-7900/#known-examples","title":"Known Examples","text":"Location Band Modem Mode GB7HIB VHF Port 2m NinoTNC 1200bd IL2P"},{"location":"equipment/ft-891/","title":"Yaesu FT-891","text":"<p>The FT-891 is an HF &amp; 6m radio manufactured by Yaesu from 2016 to the present day.</p>"},{"location":"equipment/ft-891/#bands","title":"Bands","text":"Band Power Modulation HF 0 - 100W SSB 6m 0 - 100W SSB, FM"},{"location":"equipment/ft-891/#interface","title":"Interface","text":"<p>Yaesu Mini DIN</p>"},{"location":"equipment/ft-891/#settings","title":"Settings","text":""},{"location":"equipment/ft-891/#known-examples","title":"Known Examples","text":"Location Band Modem Mode GB7HIB HF Port 40m NinoTNC 300bd IL2P"},{"location":"equipment/gm340/","title":"GM340","text":"<p>The Motorola GM340 is a commercial radio. It can be configured as VHF or UHF at the factory and supports deviation suitable for 1200bd and 9600bd.</p>"},{"location":"equipment/gm340/#bands","title":"Bands","text":"Band Power Modulation UHF 25W FM"},{"location":"equipment/gm340/#interface","title":"Interface","text":""},{"location":"equipment/gm340/#settings","title":"Settings","text":""},{"location":"equipment/gm340/#known-example","title":"Known Example","text":"<p>MM0RFN is using a GM340 as the 9600bd/UHF port on GB7HIB. </p> <p>General programming advice from BI7JTA was followed, including connector definition. </p>"},{"location":"equipment/radios/","title":"Radios","text":"<p>There are a huge number of radios we can use for packet radio, and they can be subdivided arbitrarily into many categories.</p>"},{"location":"equipment/radios/#known-good-beginner-radios","title":"Known good Beginner Radios","text":"Manufacturer Radio Band Motorola GM340 UHF Yaesu FT-7900 VHF / UHF"},{"location":"equipment/radios/#vhfuhf-radios","title":"VHF/UHF Radios","text":"Manufacturer Radio Band Motorola GM340 UHF Yaesu FT-7900 VHF / UHF"},{"location":"equipment/radios/#hf-radios","title":"HF Radios","text":"Manufacturer Radio Yaesu FT-891"},{"location":"install/bpq/","title":"BPQ","text":""},{"location":"install/bpq/#set-up-repo","title":"Set Up Repo","text":"<p>If you have not already done so, set up the repo as shown here.</p>"},{"location":"install/bpq/#install","title":"Install","text":"<p>To install LinBPQ from the repo, run the below commands:</p> <p>Terminal Commands</p> <p>sudo apt update sudo apt install linbpq</p>"},{"location":"install/bpq/#pre-configure","title":"Pre-Configure","text":"<p>We need to prepare the system and get configuration files in place. This must be run on the command line, it's simply the fastest way.</p> <p>Copy these three lines, one-at-a-time into your terminal and hit enter after each one.</p> <p>Terminal Commands</p> <p>sudo cp /usr/share/doc/linbpq/examples/bpq32.cfg /etc/bpq32.cfg sudo chown :linbpq /etc/bpq32.cfg sudo chmod 644 /etc/bpq32.cfg</p> <p>Tip</p> <p>Without a config file installed to <code>/etc/bpq32.cfg</code>, BPQ from the repo will not start. If you are looking to use a config file in a different location, remove or modify <code>ConditionPathExists=/etc/bpq32.cfg</code> in <code>/usr/lib/systemd/system/linbpq.service</code></p>"},{"location":"install/bpq/#configure","title":"Configure","text":"<p>The configuration file I ship in the repo, there are hopefully some obvious fields to fill out.</p> <p>You can find the configuration file at <code>/etc/bpq32.cfg</code> and use something like Featherpad to edit it. To learn more about editing text in Linux, see here.</p> Field Example Purpose NODECALL MM0RFN The callsign your node shall identify as NODEALIAS RFNNOD The alias a calling NET/ROM station can use to connect directly to you LOCATOR IO87dc A 6 figure Maidenhead square where you are PASSWORD test123 A sysop password for configuration activities AUTOSAVE 1 Autosave the NET/ROM Nodes Table on shutdown NODESINTERVAL 30 Interval between NET/ROM NODES broadcasts in minutes MINQUAL 50 The minimum quality of NET/ROM node included in your NODES broadcasts. CTEXT <code>Hi you look great! ***</code> Text displayed when a user connects"},{"location":"install/bpq/#ports","title":"Ports","text":"<p>Port configuration blocks in BPQNode aren't too complicated. A common Gotcha is that you configure a port specific broadcast and end up double-broadcasting, both the node master broadcast and the port specific one. </p>"},{"location":"install/bpq/#kiss","title":"KISS","text":"<p>A common port entry for a NinoTNC specifically (but also, more generally, a KISS Modem) looks like:</p> <pre><code>PORT\n  PORTNUM=1\n  ID=VHF\n  TYPE=ASYNC\n  PROTOCOL=KISS\n  KISSOPTIONS=ACKMODE\n  COMPORT=/dev/ttyACM0\n  SPEED=57600\n  FRACK=4000\n  PACLEN=150\n  DIGIFLAG=0\n  QUALITY=192\n  MINQUAL=20\nENDPORT\n</code></pre> <p>Key settings to observe are the <code>COMPORT</code>, which should be the serial port of the device, and <code>SPEED</code>. For a NinoTNC this is always 57600, but for QtSoundModem, Direwolf or older hardware may be 9600 or something else. Check your modem configuration!</p> <p><code>QUALITY</code> sets the assumed quality of connections coming in - I recommend higher quality (up to 200) for higher speed links. Setting this to 0 will disable NET/ROM on the port, and this is current recommended standard practise on HF within the UK Packet Radio Network.</p>"},{"location":"install/bpq/#telnet","title":"Telnet","text":"<p>BPQ's Telnet Port sets the TCP Ports for Telnet, FBB and HTTP connections, alongside the username and password. This will come in useful when using QtTTCP as a monitor and control application.</p> <pre><code>PORT\n  PORTNUM=9\n  ID=Telnet\n  DRIVER=Telnet\n  CONFIG\n    LOGGING=1\n    CMS=1\n    DisconnectOnClose=1\n    TCPPORT=8010\n    FBBPORT=8011\n    HTTPPORT=8008\n    LOGINPROMPT=user:\n    PASSWORDPROMPT=password:\n    MAXSESSIONS=10\n    CTEXT=Thanks for connecting\\n Enter ? for list of commands\\n\\n\n    USER=username,xxxxxxxx,m0aaa,,SYSOP\nENDPORT\n</code></pre> <p><code>USER</code> is the key configuration to change here - change <code>username</code> to your desired administrator username,  <code>xxxxxxx</code> to the password and <code>m0aaa</code> to the callsign of the administrator.</p>"},{"location":"install/bpq/#startup","title":"Startup","text":"<p>Head back to the terminal and run </p> <p>Terminal Command</p> <p>sudo systemctl start linbpq</p> <p>This will tell the system you want to start the <code>linbpq</code> service. Navigate to http://127.0.0.1:8008 if you are on the systme you've performed the install on and you should see a webpage like below:</p> <p>)</p>"},{"location":"install/linux/","title":"Linux Native Stack","text":"<p>The linux native stack is highly configurable and can be easily installed on all Debian distros.</p> <p>More detailed configuration instructions and explanations can be found here</p>"},{"location":"install/linux/#install","title":"Install","text":"<p>To get a basic node setup, the minimum viable software is:</p> <p><code>apt install libax25 ax25-tools ax25-apps uronode</code></p>"},{"location":"install/linux/#bbs","title":"BBS","text":"<p>To set up a BBS install fbb</p> <p><code>apt install fbb</code></p>"},{"location":"install/linux/#basic-config","title":"Basic Config","text":"<p>We shall set up a single AX.25 port to receive calls and display Uronode to calling stations.</p>"},{"location":"install/linux/#ax25-ports","title":"ax25 ports","text":"<p>Set up your ax25 ports in <code>/etc/ax25/axports</code></p> <p>The following example is for a NinoTNC: <pre><code># /etc/ax25/axports\n#\n# The format of this file is:\n#\n# name callsign speed paclen window description\n#\nuhf UR0CAL-10   57600   255 2   UHF 9600bd\n</code></pre></p> <p>Modify the callsign to your own or your station's call.</p> <p>This has to be attached as to the modem, in effect telling the computer to listen to the modem's output. Run the below as root:</p> <p><code>kissattach /dev/ttyACM0 uhf</code></p>"},{"location":"install/linux/#ax25d","title":"ax25d","text":"<p>ax25d (ax25 daemon) listens to incoming data and directs calling stations to the application you want them to use. It can present different applications based on any combination of the callsign calling you, the callsign and SSID the calling station is calling and the port they are calling to.</p> <p>ax25d is controlled by <code>/etc/ax25/ax25d.conf</code></p> <pre><code># /etc/ax25/ax25d.conf\n#\n# ax25d Configuration File.\n#\n# AX.25 Ports begin with a '['.\n#\n[UR0CAL-10 via uhf]\nNOCALL   * * * * * *  L\ndefault  * * * * * *  - root  /usr/sbin/uronode uronode\n</code></pre> <p>Note the callsign, SSID and port are aligned with the axport in this example. Similar to axports, modify UR0CAL to our own callsign or your station's callsign.</p> <p>ax25d is started by running the below as root:</p> <p><code>ax25d</code></p> <p>Stations should be able to call uronode on your system using AX.25.</p>"},{"location":"install/xrouter/","title":"Install XROUTER","text":"<p>Warning</p> <p>More to follow</p>"},{"location":"modems/","title":"About Modems","text":"<p>Modems are the part of a packet radio system that encodes data into audio for your radio to transmit and decodes audio received by your radio and generates control signals such at triggering the PTT so your radio knows when to transmit.</p> <p>Modems have traditionally been dedicated hardware devices in packet radio, and in the last 20 years some software modems have been written as computers have become flexible and fast!</p> <p>Modern modems come in many shapes and sizes. As long as the modem at each end of the link knows what they are sending and receiving, these are interchangeable parts. Nothing stops you and a friend from experimenting with new modes in the UK, as long as you stay within given bandwidths and aren't intentionally obfuscating/encrypting data.</p> <p>The key choices of modem as I'm presenting are:</p> <ul> <li>NinoTNC</li> <li>QtSoundmodem</li> <li>Direwolf</li> </ul> <p>Other modems are available however, including but not limited to</p> <ul> <li>ARDOPc</li> <li>VARA</li> <li>New Packet Radio</li> <li>Robust Packet</li> <li>TAPR TNC2</li> <li>KANTRONICS KAM+ and family</li> </ul>"},{"location":"modems/#what-is-a-tnc","title":"What is a TNC?","text":"<p>A term that appears regularly is 'TNC' or Terminal Node Controller, and often Modem &amp; TNC are used interchangeably, however I have made a choice to not conflate the two items.</p> <p>A TNC is a device containing not only the modem hardware, but often the Node software, personal mail, the entire logic for the AX.25 system and higher level protocols such as NET/ROM. It is effectively a complete networking computer in a box that you connected to with your computer over a serial link when computational power was a luxury not a right.</p> <p>In more modern packet systems, all of these roles are taken by the software we use - BPQ entirely handles AX.25, NET/ROM, node functionality and messaging.</p>"},{"location":"modems/#kiss-mode","title":"KISS Mode","text":"<p>We can still make use of legacy TNC units - KISS mode (Keep It Simple Stupid!) strips away all of the AX.25 and other functionality of the TNC and makes it only pass serial data it is given. We use the same serial commands of KISS mode now for the majority of modems as it is simple and well documented.</p> <p>Alternative modem command sets exist - ones I can name easily are:</p> Command Protocol Description AGW or AGWPE From AGW Packet Engine. A proprietary command set that was originally released to interact with the software it is named after 6pack 6pack offers more control over the radio and more awareness for the PC what is happening at the cost of greater complexity"},{"location":"modems/ninotnc/","title":"NinoTNC","text":"<p>The NinoTNC is a modern hardware modem that can come in either kit form or assembled. It connects to a computer by USB, and to a radio by a cable that is usually custom built buy the operator.</p> <p>It supports traditional 300, 1200 and 9600 baud packet modes as well as some more modern experimental modes designed to be more efficient that also include forward error correction. The NinoTNC has become an integral part of many new packet radio deployments in the UK and further afield.</p>"},{"location":"modems/ninotnc/#buying-one","title":"Buying one","text":"<p>Information is available on the TARPN Website Ordering Page.</p> <p>For the UK &amp; Ireland, boards are are available from Tom, M0LTE.</p>"},{"location":"modems/ninotnc/#build","title":"Build","text":"<p>The build guide for the NinoTNC is available on the TARPN Website.</p>"},{"location":"modems/ninotnc/#operation","title":"Operation","text":"<p>The Through Hole NinoTNC has 2 banks of switches: Mode and Signals, explanation below.</p> <p>USB is always 57600 baud</p>"},{"location":"modems/ninotnc/#mode-switch","title":"Mode Switch","text":"<p>Current modes as of firmware release 3.3.1:</p> Mode Baud bps Mod Protocol Intended mode BW Typical use 0010 9600 9600 GFSK IL2P+CRC FM 25k Current recommended mode for new 70cm (25kHz) links where both ends are compatible 0100 4800 4800 GFSK IL2P+CRC FM 12.5k Current recommended mode for new 2m (12.5kHz) links where both ends are compatible 0101 2400 2400 DPSK IL2P FM 12.5k For situations where only a speaker/mic connection is available but &gt; 1200 baud is desired 1011 1200 2400 QPSK IL2P+CRC SSB/FM 2.4kHz HF - quadrature version of 1200 BPSK, twice the throughput for +3dB SNR. 1010 1200 1200 BPSK IL2P+CRC SSB/FM 2.4kHz HF - use for circuits where wider transmission is acceptable. 1001 300 600 QPSK IL2P+CRC SSB 500Hz HF - quadrature version of 300 BPSK, twice the throughput for +3dB SNR 1000 300 300 BPSK IL2P+CRC SSB 500Hz HF - slowest but best performing mode. ~7dB better than classic 300 baud FSK AX.25 1110 300 300 AFSK IL2P+CRC SSB 500Hz CRC improvement of IL2P 300 baud AX.25. Recommended if you can't do BPSK / QPSK on HF. <p>Superseded (but still supported) modes:</p> Mode Baud bps Mod Protocol Superseded By Intended mode BW Typical use 0000 9600 9600 GFSK AX.25 9600 GFSK IL2P FM 25k Backwards compatibility with legacy G3RUH modems 0001 9600 9600 GFSK IL2P 9600 GFSK IL2P+CRC FM 25k Backwards compatibility. Obsoleted by 9600 GFSK IL2P+CRC 0011 4800 4800 GFSK IL2P 4800 GFSK IL2P+CRC FM 12.5k Debugging against 4800 GFSK IL2P+CRC in case of issues with the CRC mode 1111 1200 1200 BPSK IL2P 1200 BPSK IL2P+CRC SSB/FM 2.4kHz Backwards compatibility 0111 1200 1200 AFSK IL2P 4800 GFSK IL2P+CRC FM 12.5k Improvement over 1200 AFSK IL2P, where none of the GFSK modes are possible 0110 1200 1200 AFSK AX.25 1200 AFSK IL2P FM 12.5k VHF APRS, backwards compatibility with classic / legacy TNCs like PK232 1100 300 300 AFSK AX.25 300 AFSK IL2P SSB 500Hz Backwards compatibility with legacy HF packet modems. Modulation invented c. 1962! 1101 300 300 AFSK IL2P 300 AFSK IL2P+CRC SSB 500Hz IL2P improvement of AFSK 300 baud AX.25. <p>Our order of preference for modes at UKPR are:</p> <ul> <li>QPSK &gt; BPSK &gt; DPSK &gt; AFSK</li> <li>IL2P+CRC &gt; IL2P &gt; IL2P &gt; AX.25</li> <li>SSB &gt; FM</li> </ul> <p>Why? Simply put, see the below three statements but tread carefully. Not all things are equal, and not all rigs are capable of 'optimum' performance. Perfection is the enemy of good enough, so please endeavour to get something working, not something perfect.</p> <p>Modulation: These modes offer increasing bandwidth efficiency, with QPSK being our over SSB being our preferred - AFSK over FM is the least efficient mode.</p> <p>Protocol: IL2P+CRC is the most resilient mode against corruption or data loss as it transits the air, with AX.25 being unprotected against this.</p> <p>Mode: SSB is preferred as the channels are narrower and allow for more flexibility - tighter filtering and better amplification per hz.  FM is good enough, however.</p>"},{"location":"modems/ninotnc/#signals-switch","title":"Signals Switch","text":""},{"location":"modems/ninotnc/#switch-1-transmit-audio-range-selection-datamic","title":"Switch 1 - Transmit audio range selection - DATA/MIC","text":"<p>The data / on / up position increases the TXA level so the TX-LEVEL potentiometer adjustment is in the range needed by the Data radio.</p> <p>The mic / off / down position reduces transmit audio to the range needed by a microphone-level-input radio.</p>"},{"location":"modems/ninotnc/#switch-2-receive-audio-sensitivity-1x11x","title":"Switch 2 - Receive audio sensitivity - 1x/11x","text":"<p>The on / up / 1x position is about the right level for a speaker output, and is also appropriate for a data radio output.</p> <p>The off / down / 11x position is used for radios which have a very low level of receive audio, e.g. perhaps when taken from a speaker mic connection.</p>"},{"location":"modems/ninotnc/#switch-3-transmit-audio-coupling-control-dcac","title":"Switch 3 - Transmit audio coupling control - DC/AC","text":"<p>Leave in the off / down / AC position unless you have a rare case where having the voltage into the modulator track the TNC\u2019s output, exactly, is required (DC coupling).</p>"},{"location":"modems/ninotnc/#switch-4-external-carrier-detect-encd","title":"Switch 4 - External carrier detect - EN/CD","text":"<p>Leave in the off / down / CD position unless you want to provide external transmit inhibit using pin 2 of the DB9 connector.</p>"},{"location":"modems/ninotnc/#debugging-strategies","title":"Debugging Strategies","text":"<p>Link not working as well as you want? Can your friends not hear you? Can you not hear them? Let's take it back to basics and see if we can find the problem.</p> <p>Let's strip the complete system back. Make sure that BPQ or other node software is stopped - it's going to want to take over the modem and that'll get in the way. This will be easiest if you can connect to your TNC with a client such as QtTermTCP that offers both monitor and interactive panes. If you're running the linux stack, you can run <code>sudo axlisten -ac</code> to see the data decoded by your modem.</p>"},{"location":"modems/ninotnc/#no-received-signal","title":"No Received Signal","text":"<p>Not seeing anything in the monitor? We need to think about two things here: Is the modem receiving signals from the radio, and is the computer receiving signals from the modem. Let's eliminate each issue one step at a time.</p>"},{"location":"modems/ninotnc/#radio-modem-fault","title":"Radio -&gt; Modem Fault","text":"<p>First off, check the radio and check the cable. Check if the radio is set up for outputting audio through the accessory socket you're using, and it's in the correct mode (1200bd vs 9600bd - check your manual). A good test here is can you hear the signal you want to decode? If you can hear it, we need to find out why your modem can't. As the faster modes sound quite close to white noise, this doesn't always hold true, but it's a least a starter. Perhaps combine eyes and ears and watch the S-meter too!</p> <p>I often confuse the 9600bd and 1200bd lines on my interface cable - have a look to see if you've done the same. More often than not, this has melted my head during cable construction, or I'm using the cable for my UHF Radio on my HF Radio.</p> <p>Next up: is your modem in the right mode? Look online at either the node's website or UKPRN Website for hints and clues or ask questions of your peers - we're here to help.</p> <p>Finally - is your radio outputting enough audio? Is it too much audio? Look at the LEDs on your NinoTNC. Here is a guideline of how to read them:</p>"},{"location":"modems/ninotnc/#modem-computer-fault","title":"Modem -&gt; Computer Fault","text":"<p>Is your modem decoding a signal? </p> <p>You can tell by the RX DCD / Green LED lighting when a packet is successfully received &amp; decoded.</p> <p>It's being powered, and that's presumably from the computer USB port, but maybe it's not connected properly. </p> <p>Check if it is a serial device: run <code>ls /dev | grep ttyACM</code>, unplug the modem and run the command again. If there's a difference, when you plug it back in and rerun the command (for a third time, yes!) you should see a new device appear, and appear similar to below:</p> <pre><code>hibby@GB7HIB:~ $ ls /dev | grep ttyACM\nttyACM0\n</code></pre> <p>We've now identified your modem's device and we know it is appearing on your computer. If it isn't, check you are in the 'dialout' group by opening a terminal and running <code>groups</code> on the command line. If it doesn't say <code>dialout</code> in the output, follow this advice and log out/in. If the above doesn't work, try a new USB cable. </p> <p>An alternative command to look at running before and after disconnect is <code>sudo dmesg</code> - this should tell you if Linux has detected your device disappearing and reappearing.</p>"},{"location":"modems/qtsm/","title":"QtSoundModem","text":"<p>QtSoundModem is a soundmodem with a GUI written by John Wiseman G8BPQ. It is a fork of UZ7HO Soundmodem.</p> <p>It has some compelling features - not only does it natively understand IL2P at a number of different baud and bitrates and modulations, it supports multiple modems, each with a different KISS interface. This allows for up to 4 ports with different speeds, protocols and modes in the same channel - a fantastic thing to explore on HF.</p>"},{"location":"modems/qtsm/#software-set-up","title":"Software Set Up","text":""},{"location":"modems/qtsm/#installation","title":"Installation","text":"<p>If you're using Debian, Ubuntu or a Raspberry Pi it will be easiest if you install hibby's repo.</p> <p>Once you have done that you can install the prerequisites, either search for qtsoundmodem in your app store:</p> <p><code>sudo apt install qtsoundmodem</code></p>"},{"location":"modems/qtsm/#configuation","title":"Configuation","text":"<p>Configuration is done through the menu system.</p>"},{"location":"modems/qtsm/#modem-configuration","title":"Modem Configuration","text":"<p>Open Settings, then Setup modems, and face this menu:</p> <p></p> <p>Select 'IL2P Only' in the IL2P menu, and then run away.</p>"},{"location":"modems/qtsm/#debugging-strategies","title":"Debugging Strategies","text":"<p>First off, make sure you have your terminal open and at the bottom right it says 'KISS Connected' or 'AGW Connected' depending on how you've configured your interface from your soundmodem to terminal. </p>"},{"location":"modems/qtsm/#receive-check","title":"Receive Check","text":"<p>Sense check: are you hearing the remote station coming in to your radio? Have you heard it in the past? </p>"},{"location":"modems/qtsm/#check-the-radio","title":"Check the radio","text":"<p>Let's work out what's changed if you've heard the remote station in the past. </p> <ul> <li>Are you on the right frequency? </li> <li>Are they experiencing a temporary outage / expected break? </li> <li>Is your antenna OK? </li> <li>Is it in the same place? </li> <li>Is it plugged in? </li> <li>Is the radio even on?</li> <li>Is everything real or am I just living in a simulation? ...Wrong list of questions</li> </ul>"},{"location":"modems/qtsm/#check-the-cable","title":"Check the cable","text":"<p>Is the cable connected to both the radio and the computer - </p> <ul> <li>Are there any obvious breaks in the cable? </li> <li>Are the jacks at the computer end plugged in to the correct sockets?</li> <li>Maybe just reseat the cable to check it's plugged in correctly.</li> </ul>"},{"location":"modems/qtsm/#check-the-audio-coming-in-is-at-the-right-volume","title":"Check the audio coming in is at the right volume","text":"<p>Note</p> <p>This shall use the Pulse Audio Volume Control program, which is an invaluable friend in wading through Linux audio problems. If it's not obvious where this is in your application launcher, you can open a terminal and type <code>pavucontrol</code>. If you don't have it, you should <code>sudo apt install pavucontrol</code>.</p> <p>Open the input devices tab - does the VU bar of your soundcard show any activity? In the below screengrab, I have a little audio that is probably just background coming to my Built in soundcard. In many scenarios you'll be using a USB or external soundcard, it might be called a CM108 or similar - be sure you're looking at the right device. Low to no audio as I am showing indicates an issue or an error in the cable. It also might indicate your radio is squelched, be sure to check your squelch is off if possible.</p> <p>Note</p> <p>If you have no audio coming in and your radio is unsquelched, double check your cable is ok (maybe with a volt meter, or remove and reconnect the ends). Check you are looking at the right soundcard, and check each jack is going to the correct socket on the soundcard.</p> <p>If you receive a packet and the VU bar goes all the way or is very high, your incoming audio is too high - bring down that slider below the VU bar. If your incoming audio is too high, it might be distorting as the computer digitises it. Having it peak at half way should be more than enough volume.</p> <p></p> <p>This resolves to the following questions:</p> <ul> <li>Is the computer receiving audio?</li> <li>Is the received audio too high?</li> </ul>"},{"location":"modems/qtsm/#check-the-audio-coming-in-is-going-to-the-right-application","title":"Check the audio coming in is going to the right application","text":"<p>As in the above segment, open Pulse Audio Volume Control but this time go to the 'Recording' Tab. You should see an entry for QtSoundModem, or Direwolf if that is your poison of choice!</p> <p>The VU bar should show activity when a packet is received, just like the one in the Input Devices Tab. If not, you may need to change the device the audio is coming from - there will be a dropdown that lists all your computer's audio inputs and you can select. Again, there is a slider here for volume control - the effects of this are additional to that of the Input Tab, so dropping audio by 6dB in both locations will create a total drop of 12dB. Due to this, I generally recommend leaving it at 100% / 0dB and only modifying the Input Device slider.</p> <p></p> <p>If you have sorted routing, wait for more packet traffic to see if anything appears in your Terminal monitor pane.</p> <p>To understand if QtSoundModem is receiving audio, you can look in the waterfall window within the application:</p> <p>[insert image]</p> <p>This resolves to the questions: </p> <ul> <li>Is the application receiving audio?</li> <li>Is the correct soundcard selected  </li> <li>Is the application audio too high or too low?</li> </ul>"},{"location":"modems/qtsm/#transmit-audio","title":"Transmit Audio","text":""},{"location":"modems/qtsm/#check-the-generated-audio-is-going-to-the-right-soundcard","title":"Check the generated audio is going to the right soundcard","text":"<p>Open Pulse Audio Volume Control but this time go to the 'Playback' Tab. You should see an entry for QtSoundModem, or Direwolf if that is your poison of choice!</p> <p>If your modem is not showing, check in the configuration to be sure it is outputting audio to 'Pulse'. In QtSoundModem, this will look as below:</p> <p></p> <p>The VU bar should show activity when a packet is transmitted, just like the one in the Input Devices Tab. If not, you may need to change the application volume, and double check the soundcard the application is being sent to. There will be a dropdown that lists all your computer's audio outputs and you can select. Again, there is a slider here for volume control - the effects of this are additional to that of the Output Devices Tab, so dropping audio by 6dB in both locations will create a total drop of 12dB. Due to this, I generally recommend leaving it at 100% / 0dB and only modifying the Output Devices slider.</p> <p></p> <p>If you have sorted routing, generate more packet traffic to see if anything appears in your Terminal monitor pane.</p> <p>To understand if QtSoundModem is transmitting audio, you can look in the waterfall window within the application:</p> <p>[insert image]</p> <p>This resolves to the questions: </p> <ul> <li>Is the application registered in pulseaudio?</li> <li>Is the correct soundcard selected</li> <li>Is the application audio too high or too low?</li> </ul>"},{"location":"modems/qtsm/#check-the-audio-leaving-is-at-the-right-volume","title":"Check the audio leaving is at the right volume","text":"<p>Open the Output Devices tab - does the VU bar of your soundcard show any activity? </p> <p>If you transmit a packet and the VU bar goes all the way or is very high, your outgoing audio is too high - bring down that slider below the VU bar. If your incoming audio is too high, it might be distorting as the radio modulates it. Having it peak at half way should be more than enough volume. If your radio has an ALC meter, use the slider to set an optimum level in that.</p> <p></p> <p>This resolves to the following questions:</p> <ul> <li>Is the computer generating audio?</li> <li>Is the generated audio too high?</li> </ul>"}]}