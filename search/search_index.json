{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Hibby's Packet Radio Guide \u00b6 Hi, welcome - thanks for coming by! What is Packet Radio? \u00b6 Packet Radio is a niche within Amateur Radio . It combines elements of networking and the dark art of software to connect computers over a long distance without wires. With packet radio we can transfer information, files or messages without relying on the internet. We can control and understand every part of our link, from the computer and the software, through the modem, radio and antenna. Taking Your First Steps \u00b6 This is a broad part of our hobby, and it can be overwhelming to get started. There are lots of interconnecting components and new terms to learn. Keep your eye on the glossary if the terms get confusing. The key things you will need are: An Amateur Radio License A radio An antenna A computer A modem A cable to interface between the computer & radio Software Recommended first setup \u00b6 If you don't want to spend a lot of money to dip your toe in, you don't have to. The only things you'll need are a radio, a computer and a cable to interface between the two. Everything else can run as software. Have a look to see if you have a proven radio and install QtSoundModem and QtTermTCP to access someone else's node. I'd recommend trying 1200bd on VHF or UHF first, but slower modes on HF are perfectly do-able as well if you're on an island or stuck in a ditch, Take a look at the beginner's guide to see more detail about how to get started with this.","title":"Home"},{"location":"#welcome-to-hibbys-packet-radio-guide","text":"Hi, welcome - thanks for coming by!","title":"Welcome to Hibby's Packet Radio Guide"},{"location":"#what-is-packet-radio","text":"Packet Radio is a niche within Amateur Radio . It combines elements of networking and the dark art of software to connect computers over a long distance without wires. With packet radio we can transfer information, files or messages without relying on the internet. We can control and understand every part of our link, from the computer and the software, through the modem, radio and antenna.","title":"What is Packet Radio?"},{"location":"#taking-your-first-steps","text":"This is a broad part of our hobby, and it can be overwhelming to get started. There are lots of interconnecting components and new terms to learn. Keep your eye on the glossary if the terms get confusing. The key things you will need are: An Amateur Radio License A radio An antenna A computer A modem A cable to interface between the computer & radio Software","title":"Taking Your First Steps"},{"location":"#recommended-first-setup","text":"If you don't want to spend a lot of money to dip your toe in, you don't have to. The only things you'll need are a radio, a computer and a cable to interface between the two. Everything else can run as software. Have a look to see if you have a proven radio and install QtSoundModem and QtTermTCP to access someone else's node. I'd recommend trying 1200bd on VHF or UHF first, but slower modes on HF are perfectly do-able as well if you're on an island or stuck in a ditch, Take a look at the beginner's guide to see more detail about how to get started with this.","title":"Recommended first setup"},{"location":"about/","text":"About \u00b6 Hello, I'm Hibby MM0RFN and I have compiled this to the best of my ability. I work on the Debian project and can be emailed via hibby at debian.org The things I love include Scottish Consulate & 57North & Bikes & Hacking & Debian & Radio & Curling & \ud83c\udff3\ufe0f\u200d\ud83c\udf08 & \ud83e\udd8a","title":"About"},{"location":"about/#about","text":"Hello, I'm Hibby MM0RFN and I have compiled this to the best of my ability. I work on the Debian project and can be emailed via hibby at debian.org The things I love include Scottish Consulate & 57North & Bikes & Hacking & Debian & Radio & Curling & \ud83c\udff3\ufe0f\u200d\ud83c\udf08 & \ud83e\udd8a","title":"About"},{"location":"beginners-guide/","text":"Beginner's Guide \u00b6 Key Concepts \u00b6 In packet radio, we connect our computers together over the air to transmit data wirelessly. As it's not as polished as Wifi (but much more fun), there are a few things you'll need to be familiar with before you can get stuck in to the network. Equipment \u00b6 You'll need a Radio, and a computer with a cable to connect them together. Sometimes these are easy to buy online, and the moreadventurous can make them. If you've done FT-8 or another datamode, you might already have this cable. Modem \u00b6 You'll need a modem of some variety. For more advanced users this of often a piece of hardware such as a NinoTNC , but as a beginner you're better suited to a piece of software such as QtSoundModem . As the software costs nothing and takes no time to be delivered, it's quicker to get started with! Client Software \u00b6 You'll need a client of some form to be able to connect to the network. I would recommend QtTermTCP to start with. Again, it's free and it works with QtSoundModem, a NinoTNC and other hardware & software offerings too. Addresses \u00b6 Every station on the network has an address. The Government issued yours when you passed your ham exam (or if you've not sat it, they will do once you pass!). My station, as an example, is MM0RFN on the air. Sometimes, when we want to offer a service from our computer, such as a messageboard or chatroom, we will add a number afterwards. We call this an SSID, a Service Set IDentifier. Due to the limitations of AX.25, we can have from number 1 to 15. If you want to connect to my messageboard, you can tell your client to connect straight to MM0RFN-1, or if you want to connect to my chatroom it might be MM0RFN-4. SSIDs are not necessary - some stations have a frontend that will let you choose what service you want to use when you connect. When you call your local node or a nearby station, it is most likely they will have an SSID and you will have to call that. Modes \u00b6 Similar to normal radio, we have different Modes too. Instead of AM, FM, etc, we break to them down to 3 categories: Protocol: How our data is encoded Speed: How fast our data will travel (tied to bandwidth) Modulation: what manner of sound we generate to achieve communication. Both stations must use the same protocol, speed and modulation to communicate on a shared frequency. Protocol \u00b6 We use two main protocols: AX.25 (legacy) and IL2P (modern). AX.25 \u00b6 AX.25 is an umbrella term often used for all packet radio, but really it refers to the specification written between the 70s and 90s that defines the basics of packet. It has a long legacy and is rather simple, but is reliable, embedded in a lot of old hardware and will likely be in use until the heat death of the universe. Learn more here . IL2P \u00b6 IL2P, the 'Improved Layer 2 Protocol' is by Nino KK4HEJ and is an evolution of AX.25. It includes nice things such as error correction of data and allows for, theoretically, more reliable communications but isn't compatible with AX.25. There are a number of varieties of IL2P in the wild too - learn more here . Speeds \u00b6 We often use '1200', '1200bd' or similar as shorthand for how fast our data is sending and received. The 'bd' is baud, or the number of symbols a second. For most of our communications, 1 baud is equivalent to 1 bit per second. We 3 broad speed categories at the moment: 300bd - used on HF. 1200bd - used on VHF 9600bd - used on UHF and beyond Modulation \u00b6 Modulation is a little more complicated than the others as there are many ways to modulate a signal! If you've played with datamodes on a radio already, you will have a reasonable feeling for this already. The key modulations we use are: AFSK Audio Frequncy Shift Keying - Multiple audible tones. This is commonly found on VHF, FM 1200bd links. FSK Frequency Shift Keying - Multiple tones, not necessarily audible. Commonly found on UHF, FM 9600bd links. PSK Phase Shift Keying - Data encoded into changes of phase. Often found on HF links. Radio Set Up \u00b6 Find out your local packet radio frequency first, and tune your radio to see if you can hear any activity. This will be a good indicator as to whether you need to think about HF instead of VHF/UHF. If you're in the UK, this will be listed at ukpacketradio.network or UKRepeater . If information is available online, also take note of the details of the mode as this will come in handy setting up your modem Software Set Up \u00b6 Installation \u00b6 If you're using Debian, Ubuntu or a Raspberry Pi it will be easiest if you install hibby's repo . Once you have done that you can install the prerequisites: sudo apt install qtsoundmodem qttermtcp Configure QtSoundModem \u00b6 We shall set up QtSoundModem to understand the type of signal we are trying to receive. If you have details of the mode as suggested above, QtSoundModem allows easy configuration of the key details. Configure QtTermTCP \u00b6 Open QtTermTCP and set up a Kiss Connection to your Modem. This will work for QtSoundModem or a physical modem. Set up Kiss Connection \u00b6 Click Setup then KISS Configuration. Ensure 'Enable Kiss Interface' is selected, put your callsign in MYCALL and put select your modem from the 'Serial TNC' dropdown. If using a NinoTNC, the speed will be 57600. Press OK to save setting. At this stage, I recommend Monitoring the frequency to see if you can decode any information. Local stations will likely be beaconing and this is a good way to test you have set up correctly without interfering with other users transmissions. Decoded data shall look like: Connect \u00b6 Press Connect and select 'xxx' You should be presented with some choices in the bottom pane. Congratulations, you are on the air!","title":"Beginner's Guide"},{"location":"beginners-guide/#beginners-guide","text":"","title":"Beginner's Guide"},{"location":"beginners-guide/#key-concepts","text":"In packet radio, we connect our computers together over the air to transmit data wirelessly. As it's not as polished as Wifi (but much more fun), there are a few things you'll need to be familiar with before you can get stuck in to the network.","title":"Key Concepts"},{"location":"beginners-guide/#equipment","text":"You'll need a Radio, and a computer with a cable to connect them together. Sometimes these are easy to buy online, and the moreadventurous can make them. If you've done FT-8 or another datamode, you might already have this cable.","title":"Equipment"},{"location":"beginners-guide/#modem","text":"You'll need a modem of some variety. For more advanced users this of often a piece of hardware such as a NinoTNC , but as a beginner you're better suited to a piece of software such as QtSoundModem . As the software costs nothing and takes no time to be delivered, it's quicker to get started with!","title":"Modem"},{"location":"beginners-guide/#client-software","text":"You'll need a client of some form to be able to connect to the network. I would recommend QtTermTCP to start with. Again, it's free and it works with QtSoundModem, a NinoTNC and other hardware & software offerings too.","title":"Client Software"},{"location":"beginners-guide/#addresses","text":"Every station on the network has an address. The Government issued yours when you passed your ham exam (or if you've not sat it, they will do once you pass!). My station, as an example, is MM0RFN on the air. Sometimes, when we want to offer a service from our computer, such as a messageboard or chatroom, we will add a number afterwards. We call this an SSID, a Service Set IDentifier. Due to the limitations of AX.25, we can have from number 1 to 15. If you want to connect to my messageboard, you can tell your client to connect straight to MM0RFN-1, or if you want to connect to my chatroom it might be MM0RFN-4. SSIDs are not necessary - some stations have a frontend that will let you choose what service you want to use when you connect. When you call your local node or a nearby station, it is most likely they will have an SSID and you will have to call that.","title":"Addresses"},{"location":"beginners-guide/#modes","text":"Similar to normal radio, we have different Modes too. Instead of AM, FM, etc, we break to them down to 3 categories: Protocol: How our data is encoded Speed: How fast our data will travel (tied to bandwidth) Modulation: what manner of sound we generate to achieve communication. Both stations must use the same protocol, speed and modulation to communicate on a shared frequency.","title":"Modes"},{"location":"beginners-guide/#protocol","text":"We use two main protocols: AX.25 (legacy) and IL2P (modern).","title":"Protocol"},{"location":"beginners-guide/#ax25","text":"AX.25 is an umbrella term often used for all packet radio, but really it refers to the specification written between the 70s and 90s that defines the basics of packet. It has a long legacy and is rather simple, but is reliable, embedded in a lot of old hardware and will likely be in use until the heat death of the universe. Learn more here .","title":"AX.25"},{"location":"beginners-guide/#il2p","text":"IL2P, the 'Improved Layer 2 Protocol' is by Nino KK4HEJ and is an evolution of AX.25. It includes nice things such as error correction of data and allows for, theoretically, more reliable communications but isn't compatible with AX.25. There are a number of varieties of IL2P in the wild too - learn more here .","title":"IL2P"},{"location":"beginners-guide/#speeds","text":"We often use '1200', '1200bd' or similar as shorthand for how fast our data is sending and received. The 'bd' is baud, or the number of symbols a second. For most of our communications, 1 baud is equivalent to 1 bit per second. We 3 broad speed categories at the moment: 300bd - used on HF. 1200bd - used on VHF 9600bd - used on UHF and beyond","title":"Speeds"},{"location":"beginners-guide/#modulation","text":"Modulation is a little more complicated than the others as there are many ways to modulate a signal! If you've played with datamodes on a radio already, you will have a reasonable feeling for this already. The key modulations we use are: AFSK Audio Frequncy Shift Keying - Multiple audible tones. This is commonly found on VHF, FM 1200bd links. FSK Frequency Shift Keying - Multiple tones, not necessarily audible. Commonly found on UHF, FM 9600bd links. PSK Phase Shift Keying - Data encoded into changes of phase. Often found on HF links.","title":"Modulation"},{"location":"beginners-guide/#radio-set-up","text":"Find out your local packet radio frequency first, and tune your radio to see if you can hear any activity. This will be a good indicator as to whether you need to think about HF instead of VHF/UHF. If you're in the UK, this will be listed at ukpacketradio.network or UKRepeater . If information is available online, also take note of the details of the mode as this will come in handy setting up your modem","title":"Radio Set Up"},{"location":"beginners-guide/#software-set-up","text":"","title":"Software Set Up"},{"location":"beginners-guide/#installation","text":"If you're using Debian, Ubuntu or a Raspberry Pi it will be easiest if you install hibby's repo . Once you have done that you can install the prerequisites: sudo apt install qtsoundmodem qttermtcp","title":"Installation"},{"location":"beginners-guide/#configure-qtsoundmodem","text":"We shall set up QtSoundModem to understand the type of signal we are trying to receive. If you have details of the mode as suggested above, QtSoundModem allows easy configuration of the key details.","title":"Configure QtSoundModem"},{"location":"beginners-guide/#configure-qttermtcp","text":"Open QtTermTCP and set up a Kiss Connection to your Modem. This will work for QtSoundModem or a physical modem.","title":"Configure QtTermTCP"},{"location":"beginners-guide/#set-up-kiss-connection","text":"Click Setup then KISS Configuration. Ensure 'Enable Kiss Interface' is selected, put your callsign in MYCALL and put select your modem from the 'Serial TNC' dropdown. If using a NinoTNC, the speed will be 57600. Press OK to save setting. At this stage, I recommend Monitoring the frequency to see if you can decode any information. Local stations will likely be beaconing and this is a good way to test you have set up correctly without interfering with other users transmissions. Decoded data shall look like:","title":"Set up Kiss Connection"},{"location":"beginners-guide/#connect","text":"Press Connect and select 'xxx' You should be presented with some choices in the bottom pane. Congratulations, you are on the air!","title":"Connect"},{"location":"glossary/","text":"Glossary \u00b6 Term Translation AX.25 The underlying packet radio protocol, sometimes used as a generic term BBS Bulletin Board System - an email and message service hosted on a nearby mailbox NET/ROM A routing and discovery layer that makes connecting to nearby and distant stations easier Node A computer in the network. It can be a full featured system with applications hosted at home or at a nearby site, or it can be a simplified system that only passes messages on behalf others PMS Personal Message System - a reduced functionality BBS hosted on your home node","title":"Glossary"},{"location":"glossary/#glossary","text":"Term Translation AX.25 The underlying packet radio protocol, sometimes used as a generic term BBS Bulletin Board System - an email and message service hosted on a nearby mailbox NET/ROM A routing and discovery layer that makes connecting to nearby and distant stations easier Node A computer in the network. It can be a full featured system with applications hosted at home or at a nearby site, or it can be a simplified system that only passes messages on behalf others PMS Personal Message System - a reduced functionality BBS hosted on your home node","title":"Glossary"},{"location":"hardware/","text":"Hardware \u00b6 Modems \u00b6 NinoTNC \u00b6 NinoTNC is lovely Another \u00b6 Radios \u00b6 GM340 \u00b6 I use this","title":"Hardware"},{"location":"hardware/#hardware","text":"","title":"Hardware"},{"location":"hardware/#modems","text":"","title":"Modems"},{"location":"hardware/#ninotnc","text":"NinoTNC is lovely","title":"NinoTNC"},{"location":"hardware/#another","text":"","title":"Another"},{"location":"hardware/#radios","text":"","title":"Radios"},{"location":"hardware/#gm340","text":"I use this","title":"GM340"},{"location":"repo/","text":"Hibby's Repo \u00b6 Install Signing Key \u00b6 First, you need tell your machine to trust the signature I verify the packages with: wget -q https://online-amateur-radio-club-m0ouk.github.io/oarc-packages/hibby.key sudo mv hibby.key /etc/apt/trusted.gpg.d/hibby.asc You can trust this key - it is contained in Debian and signed as trusted by other developers in the project. Set up Repo \u00b6 Then you need to add the repo for your OS: # Ubuntu 22.04 LTS amd64 sudo sh -c 'echo \"deb https://online-amateur-radio-club-m0ouk.github.io/oarc-packages jammy main\" >> /etc/apt/sources.list' # Raspberry Pi OS 12 - 'Bookworm' sudo sh -c 'echo \"deb https://online-amateur-radio-club-m0ouk.github.io/oarc-packages bookworm main\" >> /etc/apt/sources.list' # Raspberry Pi OS 11 - 'Bullseye' sudo sh -c 'echo \"deb https://online-amateur-radio-club-m0ouk.github.io/oarc-packages bullseye main\" >> /etc/apt/sources.list' # Debian 13 amd64 sudo sh -c 'echo \"deb https://online-amateur-radio-club-m0ouk.github.io/oarc-packages testing main\" >> /etc/apt/sources.list' # Debian 12 amd64 sudo sh -c 'echo \"deb https://online-amateur-radio-club-m0ouk.github.io/oarc-packages bookworm main\" >> /etc/apt/sources.list' Update \u00b6 Once the repo is setup, refresh your package lists and we're good to go: sudo apt update","title":"Hibby's Repo"},{"location":"repo/#hibbys-repo","text":"","title":"Hibby's Repo"},{"location":"repo/#install-signing-key","text":"First, you need tell your machine to trust the signature I verify the packages with: wget -q https://online-amateur-radio-club-m0ouk.github.io/oarc-packages/hibby.key sudo mv hibby.key /etc/apt/trusted.gpg.d/hibby.asc You can trust this key - it is contained in Debian and signed as trusted by other developers in the project.","title":"Install Signing Key"},{"location":"repo/#set-up-repo","text":"Then you need to add the repo for your OS: # Ubuntu 22.04 LTS amd64 sudo sh -c 'echo \"deb https://online-amateur-radio-club-m0ouk.github.io/oarc-packages jammy main\" >> /etc/apt/sources.list' # Raspberry Pi OS 12 - 'Bookworm' sudo sh -c 'echo \"deb https://online-amateur-radio-club-m0ouk.github.io/oarc-packages bookworm main\" >> /etc/apt/sources.list' # Raspberry Pi OS 11 - 'Bullseye' sudo sh -c 'echo \"deb https://online-amateur-radio-club-m0ouk.github.io/oarc-packages bullseye main\" >> /etc/apt/sources.list' # Debian 13 amd64 sudo sh -c 'echo \"deb https://online-amateur-radio-club-m0ouk.github.io/oarc-packages testing main\" >> /etc/apt/sources.list' # Debian 12 amd64 sudo sh -c 'echo \"deb https://online-amateur-radio-club-m0ouk.github.io/oarc-packages bookworm main\" >> /etc/apt/sources.list'","title":"Set up Repo"},{"location":"repo/#update","text":"Once the repo is setup, refresh your package lists and we're good to go: sudo apt update","title":"Update"},{"location":"software/","text":"What are my choices? \u00b6 Currently the choices for software boil down to 3 major stacks LinBPQ \u00b6 LinBPQ is written by John G8BPQ and allows a computer to act as a node in a NET/ROM and AX.25 network. It is being actively developed with both new features and bugfixes being rolled out on a regular basis. It offers the following applications: BBS Chat For details on how to use it: Installation information can be found here . Configuration can be found here . The project website can be found here XROUTER \u00b6 XROUTER is written by Paula G8PZT and allows a computer to act as a node in a NET/ROM and AX.25 network. It is being actively developed with new features and bug fixes. It offers the following applications: Chat Personal Message Server For details on how to use it: Installation information can be found here . Configuration can be found here . The project website can be found here Linux Native Stack \u00b6 The Linux native AX.25 stack has been authored by many over the years, and is shipped as a standard part of Debian. It comprises kernel modules and userland code, and is not bundled as a single big monolithic application. The system offers the following applications: Node frontend via Uronode BBS via FBB Bash or any other terminal with axspawn Many applications with axwrapper For details on how to use it: Installation information can be found here . Configuration can be found here .","title":"What are my choices?"},{"location":"software/#what-are-my-choices","text":"Currently the choices for software boil down to 3 major stacks","title":"What are my choices?"},{"location":"software/#linbpq","text":"LinBPQ is written by John G8BPQ and allows a computer to act as a node in a NET/ROM and AX.25 network. It is being actively developed with both new features and bugfixes being rolled out on a regular basis. It offers the following applications: BBS Chat For details on how to use it: Installation information can be found here . Configuration can be found here . The project website can be found here","title":"LinBPQ"},{"location":"software/#xrouter","text":"XROUTER is written by Paula G8PZT and allows a computer to act as a node in a NET/ROM and AX.25 network. It is being actively developed with new features and bug fixes. It offers the following applications: Chat Personal Message Server For details on how to use it: Installation information can be found here . Configuration can be found here . The project website can be found here","title":"XROUTER"},{"location":"software/#linux-native-stack","text":"The Linux native AX.25 stack has been authored by many over the years, and is shipped as a standard part of Debian. It comprises kernel modules and userland code, and is not bundled as a single big monolithic application. The system offers the following applications: Node frontend via Uronode BBS via FBB Bash or any other terminal with axspawn Many applications with axwrapper For details on how to use it: Installation information can be found here . Configuration can be found here .","title":"Linux Native Stack"},{"location":"clients/qtttcp/","text":"QtTermTCP \u00b6","title":"QtTermTCP"},{"location":"clients/qtttcp/#qttermtcp","text":"","title":"QtTermTCP"},{"location":"config/bpq/","text":"BPQ \u00b6 Configure BPQ this way: Badly, just like everyone else.","title":"BPQ"},{"location":"config/bpq/#bpq","text":"Configure BPQ this way: Badly, just like everyone else.","title":"BPQ"},{"location":"config/linux/","text":"Linux Native AX.25 Stack \u00b6 For Debian-alikes, see installation instructions . Each of the below components are required to make the complete node, but they are (generally) not all interdependent, and most of the unique components will work to make a stripped down version. axports \u00b6 Setting up basic AX.25 on Debian is relatively simple - the key file to edit here is /etc/ax25/axports . GB7HIB currently runs the following below config. Each port has been given an internal reference, I like to detail what connection they are providing. Other people map them out by number or other methods, but I find having a pretty consistent set of references to the radio/interface I'm using keeps my brain in check. The callsign&SSID is, in this case, the physical address for the port, akin to a MAC address on ethernet. It shows under ifconfig as a mac address for the link. Speed is the speed of the serial port on the interface. In the case of the NinoTNC, this is 57600. Paclen is the packet length - for V/UHF links, 255 bytes is a nice length. For HF, 60-80 is more common. It means for shorter packets that aren't as likely to be impacted by changes in propagation. Window is the number of packets that can be sent in one burst. The more reliable the link,the higher the number. This is limited by the version of ax25 you're running - 2.0 has a lower window than 2.0. If you're running Linux, at the moment you're on ax25 2.0. hibby@raspberrypi:~ $ cat /etc/ax25/axports # /etc/ax25/axports # # The format of this file is: # # name callsign speed paclen window description # uhf GB7HIB-10 57600 255 2 UHF 9600bd ip GB7HIB-11 115200 255 7 IP kissattach \u00b6 kissattach binds the axport to a physical kiss device. I attach my UHF port to my NinoTNC with: kissattach /dev/ttyACM0 uhf axcall \u00b6 With the basic port configured, you can use axcall to place a call. hibby@raspberrypi:~ $ axcall uhf gm0nrt-7 calls my neighbour bill over layer 2/ax.25 point to point. You can go via someone too as a digipeter, axcall uhf gm0cqv-7 via gm0nrt calls gm0cqv using gm0nrt as a digipeter! ax25ipd \u00b6 ax25ipd manages point to point links over the internet between myself and other stations. These can be UDP and TCP. In effect, we are creating a virtual modem to handle communication with other stations, just like we are doing with software or hardware modems when dealing with 'real radios'. There are a couple of parts needed to make this work as an interface on my system - socat , ax25ipd and kissattach . This can be a little abstract, but the mode of interaction as is follows: We create a virtual modem with ax25ipd , a virtual pipe with socat that lets us connect to it similar to a physically attached modem and then run kissattach to make that relationship. socat \u00b6 I create a socket pair to connect ax25ipd and kissattach to connect the ip ax25 port to the axudp tunnel. The command I run for this is: socat -d -d -ly pty,raw,echo=0,link=/var/ax25/pty/axip1 pty,raw,echo=0,link=/var/ax25/pty/axip2 If you are copying this, you might need to make the /var/ax25/pty - mkdir -p /var/ax25/pty This is brought up at boottime by systemd: hibby@raspberrypi:~ $ cat /etc/systemd/system/kiss-socat-axip.service [Unit] Description=Socat interconnect for AX25 AXIP After=network-online.target Wants=network-online.target [Service] WorkingDirectory=/var/ax25 ExecStart=socat -d -d -ly pty,raw,echo=0,link=/var/ax25/pty/axip1 pty,raw,echo=0,link=/var/ax25/pty/axip2 ExecStartPost=/usr/bin/bash -c 'while ! [ -h /var/ax25/pty/axip2 ]; do sleep 1 ; done' ExecStopPost=rm /var/ax25/pty/axip1 /var/ax25/pty/axip2 [Install] WantedBy=multi-user.target ax25ipd.conf \u00b6 ax25ipd.conf is the core configuration file for this component. Below you can see that I connect to udp port 10095 of the remote station, and locally ax25ipd is in 'tnc' mode, binding to the previously created axip1 . The route allows broadcasts b and is my default route d . I beacon what the station is periodically, and I also allow NET/ROM NODES broadcasts and FBB broadcasts to go over the link. hibby@raspberrypi:~ $ cat /etc/ax25/ax25ipd.conf socket udp 10095 mode tnc device /var/ax25/pty/axip1 speed 115200 loglevel 2 beacon after 3600 loglevel 2 btext ax25ip -- hibby/GB7HIB-2 -- AXIP Interface broadcast QST-0 NODES-0 FBB-0 route MM3NDH 10.13.37.2 bd Running ax25ipd \u00b6 This is run from the command line as follows: ax25ipd kissattach \u00b6 We need to attach the axip port to the virtual modem we've created with ax25ipd once it's running, and this is a simple case of: kissattach /var/ax25/pty/axip2 axip NET/ROM \u00b6 NET/ROM covers functionality analogous to OSI layer3/layer 4. What it means in reality is that my node has a knowledge of its neighbours and what their neighbours are, and automates routing calls. To use the earlier example, I can call directly to gm0cqv and my machine will know the best path - axcall nrnod GM0CQV-7 Each NET/ROM sends a 'NODES' broadcast periodically. This details what systems it can hear, what the gateway to the remote nodes is and a 'quality' value. Nodes on the network can have an alias too - GM0CQV's node on -7 above is PTRNOD, so I can do the following - axcall nrnod PTRNOD and end up at the same location. NET/ROM ports are largely independent of ax25 ports in that a user can call any given nrport without going through a specific axport. You can essentially define per-application nrports, and as many as you wish (assuming you have free unique SSIDs to offer them as mac addresses). nrports \u00b6 /etc/ax25/nrports ,similar to axports, defines the netrom ports the system has available. I expect primary incoming connections to be through netrom, so mine are lower numbered. netrom ports should not share SSID numbers with axports. This will make your system rather unstable. hibby@raspberrypi:~ $ cat /etc/ax25/nrports # /etc/ax25/nrports # # The format of this file is: # # name callsign alias paclen description # nrnod GB7HIB-1 HIBNOD 235 Netrom node Port nrbbs GB7HIB-2 HIBBBS 235 Netrom BBS Port I have a port for my service, the callsign and port, and an up to 6 letter alias for the service. The packet length is 20 bytes shorter than the ax25 packet to account for overheads, and then there's a wee description. nrbroadcast \u00b6 /etc/ax25/nrbroadcast defines how often netromd sends a NODES broadcast and what port it sends them over. It also defines the default quality of stations received directly over that port, the worst quality it will broadcast, how long without hearing a nodes broadcast the station will remain in your routing table. I have set some sensible defaults, things that come over the ip link are quite high, but I limit the worst quality so that my NODES table isn't too big. hibby@raspberrypi:~ $ cat /etc/ax25/nrbroadcast # /etc/ax25/nrbroadcast # # The format of this file is: # # ax25_name min_obs def_qual worst_qual verbose # uhf 5 192 100 1 ip 3 200 130 1 nrattach \u00b6 Like AX.25, we need to attach the port to a device - our tool for this is nrattach . nrattach is simple - you nrattach a port and that's it. nrattach nrnod netromd \u00b6 netromd handles incoming and outgoing broadcasts. I should really make this systemd unit come up after nrattach. I run it as netromd -i -l -d -t 30 , which broadcasts almost immidiately, creates debug logs and broadcasts every 30 minutes. ax25d \u00b6 ax25d is the Daemon that routes incoming connection requests and spins up a process for the caller. Interestingly, it isn't tied to the incoming port that the call is coming through, so you can have any port or interface handle calls to any callsign, alias or other word. /etc/ax25/ax25d.conf is the config file that controls this, and it handles ax25 ports and netrom ports slightly differently. The default config we ship with debian is full of great examples, see online here - mine is configured as below. Reading it, you can see that GB7HIB is in [] and nrnod is in <>. They define the type of port. This means if you connect to GB7HIB over ax25, you get uronode. If you connect to HIBNOD, or GB7HIB-1 over netrom, you get uronode! I am really interested in exploring some other applications, including axspawn , which lets you spawn a bash (or other) shell and effectively gives shell access over ax25/netrom to a user. There's lots of options here, and it's an incredibly flexible piece of software and is the core of why the Linux stack is so interesting to me. You can present any binary on your system to a connecting user! hibby@raspberrypi:~ $ cat /etc/ax25/ax25d.conf # /etc/ax25/ax25d.conf # # ax25d Configuration File. # # AX.25 Ports begin with a '['. # [GB7HIB via uhf] NOCALL * * * * * * L default * * * * * * - root /usr/sbin/uronode uronode # [GB7HIB via ip] NOCALL * * * * * * L default * * * * * * - root /usr/sbin/uronode uronode # # NET/ROM Ports begin with a '<'. # <nrnod> NOCALL * * * * * * L default * * * * * * - root /usr/sbin/uronode uronode # Running ax25d \u00b6 This is an easy one to start - ax25d Uronode Frontend \u00b6 I use uronode both as a frontend for users connecting and for me connecting to the node and to neighbouring stations, essentially over telnet. When someone connects to my system, Uronode generates the menu that they see. I also have it configured as my local client - i can run uronode in a terminal and be presented with a helpful control interface. uronode.conf \u00b6 This is the core config file for uronode that details what uronode can do. I'm running mine very stripped back, and have cut a lot of the defaults out: You can see the BBS command is just a uronode call out to GB7HIB-2 over netrom, and there are external commands for netstat and the 'nodesearch' program I quite like. The rest is pretty much default. hibby@raspberrypi:~ $ cat /etc/ax25/uronode.conf # /etc/ax25/uronode.conf - URONode example configuration file # # see uronode.conf(5) # \"Local\" network. # This is your local amprnet subnet in full. Do NOT use 44.0.0.0/8! LocalNet 10.66.66.0/24 # Command aliases. See uronode.conf(5) for the meaning of the uppercase # letters in the name of the alias. Examples below: Alias BBS \"c GB7HIB-2\" # External commands. See uronode.conf(5) for the meaning of the uppercase # letters in the name of the extcmd. # # Flags: 1 Run command through pipe # 2 Reconnected flag # 3 Run through pipe and reconnect # ExtCmd NEtstat 3 nobody /bin/netstat netstat --ax25 --netrom ExtCmd NSearch 3 root /usr/local/bin/nodesearch nodesearch %1 # Node ID. # This displays before all output texts when the user connects into # your node via NetRom. Set to \"\" to leave blank. # Note: This -must- be defined or will display as \"(null)\". A space # is hardcoded in. Example: UROHUB:N1URO-2 do NOT add the bracket # afterwards \"}\" this is predefined in URONode. # NodeId HIBNOD:GB7HIB-1 # Ax25/Flex ID. # This displays before some strings and at logout to the end user when # they connect in via ax25 as defined in your ax25d.conf file. If # you don't define this \"(null)\" will be presented to the end user. Its # suggested you take this from your ax25d config which either faces a # flexnet system OR your 2-meter user interface. Note: do NOT make this # ssid the same as your NetRom SSID here or in ax25d.conf. FlexId GB7HIB-10 # Netrom port name. This port is used for outgoing netrom connects. NrPort nrnod ReConnect on # Syslog Logging level - suggest leaving this at 3 for debugging. 0 # halts logging. LogLevel 3 PassPrompt \"yes\" # The default escape character (CTRL-T) # EscapeChar ^T Other Uronode Config Files \u00b6 I have modified some other files that are worth highlighting - uronode.perms \u00b6 I have added the below line which allows me to login without password from the localhost by starting from shell and gets me nice colours! mm0rfn host * * 255 uronode.announce \u00b6 This has local announcements in it! uronode.info \u00b6 This has information about the system in it uronode.motd \u00b6 This is the welcome message displayed on every login uronode.users \u00b6 This defines shell access for me as a sysop. I've never actually spawned a shell from uronode, but apparently it's possible?! Uronode as a local interface \u00b6 I use uronode as my local packet radio terminal - instead of turning on and typing axcall nrnod salbbs to get to gm0nrt, I log in, type uronode, feed it my callsign and I am met with the uronode command interface, from which I can type c salbbs . It's a much nicer place to be! This required xinetd for me to set up easily. xinetd config \u00b6 I think the below two config files are the only things required to make uronode listen on port 3964 - xinetd must be enabled and started by systemd to be listening ( systemctl enable xinetd , systemctl start xinetd ) There is probably a systemd native way of doing this, but I couldn't see that in the docs. hibby@raspberrypi:~ $ cat /etc/xinetd.d/uronode service uronode { disable = no socket_type = stream protocol = tcp user = root server = /usr/sbin/uronode wait = no instances = 20 } hibby@raspberrypi:~ $ cat /etc/services | grep uronode uronode 3694/tcp # Uronode FBB BBS \u00b6 fbb is my BBS software of choice! It is an oddity in that it binds directly to the ports you tell it exist, so it's listening on my ax25 and netrom ports without an entry in ax25d.conf . This mostly seems like magic to me and I am happy to let it run this way! It has a few config files - fbb.conf, which is populated by the first run, ports.sys which defines the ports available and then bbs.sys and forward.sys which defines how you route to the outside world. ports.sys \u00b6 My reference for this file was this website , which was a helpful resource! I have incremented the number of TNCs where appropriate and added my ports as 1,2,3. I have left the COM 1 Interface 9 etc alone. hibby@raspberrypi:~ $ cat /etc/ax25/fbb/port.sys # FBB7.0.11 # #Ports TNCs 1 3 # #Com Interface Adress (Hex) Baud 1 9 **** 9600 # #TNC NbCh Com MultCh Pacln Maxfr NbFwd MxBloc M/P-Fwd Mode Freq 0 0 0 0 0 0 0 0 00/01 ---- File-fwd. 1 8 1 uhf 250 2 1 10 00/15 XUWYL 433.6250 2 8 1 ip 250 2 1 10 00/15 XUWYL ip port 3 8 1 nrbbs 236 2 1 10 00/15 XUWYL netrom port # # End of file. # bbs.sys, forward.sys \u00b6 The Documentation is the best reference I've got for it, and I can't improve upon it. Running Everything \u00b6 I used to use systemd to bring things up, but now I run it with a bash script run as root: #!/bin/bash echo -n 'Creating socat sockets...' socat -d -d -ly pty,raw,echo=0,link=/var/ax25/pty/axip1 pty,raw,echo=0,link=/var/ax25/pty/axip2 & sleep 1 echo Done echo -n 'Starting ax25ipd' ax25ipd sleep 1 kissattach /dev/ttyACM0 uhf kissattach /var/ax25/pty/axip2 ip kissparms -c 1 -p uhf kissparms -c 1 -p ip sleep 1 echo 'Done' echo -n 'Bringing up NET/ROM runtime...' modprobe netrom nrattach nrnod nrattach nrbbs nrattach nrterm netromd -i -l -d -t 30 echo -n Starting mheard daemon... mheardd -l echo Done echo -n Starting ax25 daemon... ax25d -l echo Done echo -n 'Starting fbb' sudo fbb -f -l /home/hibby/fbb.log echo Done","title":"Linux Native AX.25 Stack"},{"location":"config/linux/#linux-native-ax25-stack","text":"For Debian-alikes, see installation instructions . Each of the below components are required to make the complete node, but they are (generally) not all interdependent, and most of the unique components will work to make a stripped down version.","title":"Linux Native AX.25 Stack"},{"location":"config/linux/#axports","text":"Setting up basic AX.25 on Debian is relatively simple - the key file to edit here is /etc/ax25/axports . GB7HIB currently runs the following below config. Each port has been given an internal reference, I like to detail what connection they are providing. Other people map them out by number or other methods, but I find having a pretty consistent set of references to the radio/interface I'm using keeps my brain in check. The callsign&SSID is, in this case, the physical address for the port, akin to a MAC address on ethernet. It shows under ifconfig as a mac address for the link. Speed is the speed of the serial port on the interface. In the case of the NinoTNC, this is 57600. Paclen is the packet length - for V/UHF links, 255 bytes is a nice length. For HF, 60-80 is more common. It means for shorter packets that aren't as likely to be impacted by changes in propagation. Window is the number of packets that can be sent in one burst. The more reliable the link,the higher the number. This is limited by the version of ax25 you're running - 2.0 has a lower window than 2.0. If you're running Linux, at the moment you're on ax25 2.0. hibby@raspberrypi:~ $ cat /etc/ax25/axports # /etc/ax25/axports # # The format of this file is: # # name callsign speed paclen window description # uhf GB7HIB-10 57600 255 2 UHF 9600bd ip GB7HIB-11 115200 255 7 IP","title":"axports"},{"location":"config/linux/#kissattach","text":"kissattach binds the axport to a physical kiss device. I attach my UHF port to my NinoTNC with: kissattach /dev/ttyACM0 uhf","title":"kissattach"},{"location":"config/linux/#axcall","text":"With the basic port configured, you can use axcall to place a call. hibby@raspberrypi:~ $ axcall uhf gm0nrt-7 calls my neighbour bill over layer 2/ax.25 point to point. You can go via someone too as a digipeter, axcall uhf gm0cqv-7 via gm0nrt calls gm0cqv using gm0nrt as a digipeter!","title":"axcall"},{"location":"config/linux/#ax25ipd","text":"ax25ipd manages point to point links over the internet between myself and other stations. These can be UDP and TCP. In effect, we are creating a virtual modem to handle communication with other stations, just like we are doing with software or hardware modems when dealing with 'real radios'. There are a couple of parts needed to make this work as an interface on my system - socat , ax25ipd and kissattach . This can be a little abstract, but the mode of interaction as is follows: We create a virtual modem with ax25ipd , a virtual pipe with socat that lets us connect to it similar to a physically attached modem and then run kissattach to make that relationship.","title":"ax25ipd"},{"location":"config/linux/#socat","text":"I create a socket pair to connect ax25ipd and kissattach to connect the ip ax25 port to the axudp tunnel. The command I run for this is: socat -d -d -ly pty,raw,echo=0,link=/var/ax25/pty/axip1 pty,raw,echo=0,link=/var/ax25/pty/axip2 If you are copying this, you might need to make the /var/ax25/pty - mkdir -p /var/ax25/pty This is brought up at boottime by systemd: hibby@raspberrypi:~ $ cat /etc/systemd/system/kiss-socat-axip.service [Unit] Description=Socat interconnect for AX25 AXIP After=network-online.target Wants=network-online.target [Service] WorkingDirectory=/var/ax25 ExecStart=socat -d -d -ly pty,raw,echo=0,link=/var/ax25/pty/axip1 pty,raw,echo=0,link=/var/ax25/pty/axip2 ExecStartPost=/usr/bin/bash -c 'while ! [ -h /var/ax25/pty/axip2 ]; do sleep 1 ; done' ExecStopPost=rm /var/ax25/pty/axip1 /var/ax25/pty/axip2 [Install] WantedBy=multi-user.target","title":"socat"},{"location":"config/linux/#ax25ipdconf","text":"ax25ipd.conf is the core configuration file for this component. Below you can see that I connect to udp port 10095 of the remote station, and locally ax25ipd is in 'tnc' mode, binding to the previously created axip1 . The route allows broadcasts b and is my default route d . I beacon what the station is periodically, and I also allow NET/ROM NODES broadcasts and FBB broadcasts to go over the link. hibby@raspberrypi:~ $ cat /etc/ax25/ax25ipd.conf socket udp 10095 mode tnc device /var/ax25/pty/axip1 speed 115200 loglevel 2 beacon after 3600 loglevel 2 btext ax25ip -- hibby/GB7HIB-2 -- AXIP Interface broadcast QST-0 NODES-0 FBB-0 route MM3NDH 10.13.37.2 bd","title":"ax25ipd.conf"},{"location":"config/linux/#running-ax25ipd","text":"This is run from the command line as follows: ax25ipd","title":"Running ax25ipd"},{"location":"config/linux/#kissattach_1","text":"We need to attach the axip port to the virtual modem we've created with ax25ipd once it's running, and this is a simple case of: kissattach /var/ax25/pty/axip2 axip","title":"kissattach"},{"location":"config/linux/#netrom","text":"NET/ROM covers functionality analogous to OSI layer3/layer 4. What it means in reality is that my node has a knowledge of its neighbours and what their neighbours are, and automates routing calls. To use the earlier example, I can call directly to gm0cqv and my machine will know the best path - axcall nrnod GM0CQV-7 Each NET/ROM sends a 'NODES' broadcast periodically. This details what systems it can hear, what the gateway to the remote nodes is and a 'quality' value. Nodes on the network can have an alias too - GM0CQV's node on -7 above is PTRNOD, so I can do the following - axcall nrnod PTRNOD and end up at the same location. NET/ROM ports are largely independent of ax25 ports in that a user can call any given nrport without going through a specific axport. You can essentially define per-application nrports, and as many as you wish (assuming you have free unique SSIDs to offer them as mac addresses).","title":"NET/ROM"},{"location":"config/linux/#nrports","text":"/etc/ax25/nrports ,similar to axports, defines the netrom ports the system has available. I expect primary incoming connections to be through netrom, so mine are lower numbered. netrom ports should not share SSID numbers with axports. This will make your system rather unstable. hibby@raspberrypi:~ $ cat /etc/ax25/nrports # /etc/ax25/nrports # # The format of this file is: # # name callsign alias paclen description # nrnod GB7HIB-1 HIBNOD 235 Netrom node Port nrbbs GB7HIB-2 HIBBBS 235 Netrom BBS Port I have a port for my service, the callsign and port, and an up to 6 letter alias for the service. The packet length is 20 bytes shorter than the ax25 packet to account for overheads, and then there's a wee description.","title":"nrports"},{"location":"config/linux/#nrbroadcast","text":"/etc/ax25/nrbroadcast defines how often netromd sends a NODES broadcast and what port it sends them over. It also defines the default quality of stations received directly over that port, the worst quality it will broadcast, how long without hearing a nodes broadcast the station will remain in your routing table. I have set some sensible defaults, things that come over the ip link are quite high, but I limit the worst quality so that my NODES table isn't too big. hibby@raspberrypi:~ $ cat /etc/ax25/nrbroadcast # /etc/ax25/nrbroadcast # # The format of this file is: # # ax25_name min_obs def_qual worst_qual verbose # uhf 5 192 100 1 ip 3 200 130 1","title":"nrbroadcast"},{"location":"config/linux/#nrattach","text":"Like AX.25, we need to attach the port to a device - our tool for this is nrattach . nrattach is simple - you nrattach a port and that's it. nrattach nrnod","title":"nrattach"},{"location":"config/linux/#netromd","text":"netromd handles incoming and outgoing broadcasts. I should really make this systemd unit come up after nrattach. I run it as netromd -i -l -d -t 30 , which broadcasts almost immidiately, creates debug logs and broadcasts every 30 minutes.","title":"netromd"},{"location":"config/linux/#ax25d","text":"ax25d is the Daemon that routes incoming connection requests and spins up a process for the caller. Interestingly, it isn't tied to the incoming port that the call is coming through, so you can have any port or interface handle calls to any callsign, alias or other word. /etc/ax25/ax25d.conf is the config file that controls this, and it handles ax25 ports and netrom ports slightly differently. The default config we ship with debian is full of great examples, see online here - mine is configured as below. Reading it, you can see that GB7HIB is in [] and nrnod is in <>. They define the type of port. This means if you connect to GB7HIB over ax25, you get uronode. If you connect to HIBNOD, or GB7HIB-1 over netrom, you get uronode! I am really interested in exploring some other applications, including axspawn , which lets you spawn a bash (or other) shell and effectively gives shell access over ax25/netrom to a user. There's lots of options here, and it's an incredibly flexible piece of software and is the core of why the Linux stack is so interesting to me. You can present any binary on your system to a connecting user! hibby@raspberrypi:~ $ cat /etc/ax25/ax25d.conf # /etc/ax25/ax25d.conf # # ax25d Configuration File. # # AX.25 Ports begin with a '['. # [GB7HIB via uhf] NOCALL * * * * * * L default * * * * * * - root /usr/sbin/uronode uronode # [GB7HIB via ip] NOCALL * * * * * * L default * * * * * * - root /usr/sbin/uronode uronode # # NET/ROM Ports begin with a '<'. # <nrnod> NOCALL * * * * * * L default * * * * * * - root /usr/sbin/uronode uronode #","title":"ax25d"},{"location":"config/linux/#running-ax25d","text":"This is an easy one to start - ax25d","title":"Running ax25d"},{"location":"config/linux/#uronode-frontend","text":"I use uronode both as a frontend for users connecting and for me connecting to the node and to neighbouring stations, essentially over telnet. When someone connects to my system, Uronode generates the menu that they see. I also have it configured as my local client - i can run uronode in a terminal and be presented with a helpful control interface.","title":"Uronode Frontend"},{"location":"config/linux/#uronodeconf","text":"This is the core config file for uronode that details what uronode can do. I'm running mine very stripped back, and have cut a lot of the defaults out: You can see the BBS command is just a uronode call out to GB7HIB-2 over netrom, and there are external commands for netstat and the 'nodesearch' program I quite like. The rest is pretty much default. hibby@raspberrypi:~ $ cat /etc/ax25/uronode.conf # /etc/ax25/uronode.conf - URONode example configuration file # # see uronode.conf(5) # \"Local\" network. # This is your local amprnet subnet in full. Do NOT use 44.0.0.0/8! LocalNet 10.66.66.0/24 # Command aliases. See uronode.conf(5) for the meaning of the uppercase # letters in the name of the alias. Examples below: Alias BBS \"c GB7HIB-2\" # External commands. See uronode.conf(5) for the meaning of the uppercase # letters in the name of the extcmd. # # Flags: 1 Run command through pipe # 2 Reconnected flag # 3 Run through pipe and reconnect # ExtCmd NEtstat 3 nobody /bin/netstat netstat --ax25 --netrom ExtCmd NSearch 3 root /usr/local/bin/nodesearch nodesearch %1 # Node ID. # This displays before all output texts when the user connects into # your node via NetRom. Set to \"\" to leave blank. # Note: This -must- be defined or will display as \"(null)\". A space # is hardcoded in. Example: UROHUB:N1URO-2 do NOT add the bracket # afterwards \"}\" this is predefined in URONode. # NodeId HIBNOD:GB7HIB-1 # Ax25/Flex ID. # This displays before some strings and at logout to the end user when # they connect in via ax25 as defined in your ax25d.conf file. If # you don't define this \"(null)\" will be presented to the end user. Its # suggested you take this from your ax25d config which either faces a # flexnet system OR your 2-meter user interface. Note: do NOT make this # ssid the same as your NetRom SSID here or in ax25d.conf. FlexId GB7HIB-10 # Netrom port name. This port is used for outgoing netrom connects. NrPort nrnod ReConnect on # Syslog Logging level - suggest leaving this at 3 for debugging. 0 # halts logging. LogLevel 3 PassPrompt \"yes\" # The default escape character (CTRL-T) # EscapeChar ^T","title":"uronode.conf"},{"location":"config/linux/#other-uronode-config-files","text":"I have modified some other files that are worth highlighting -","title":"Other Uronode Config Files"},{"location":"config/linux/#uronodeperms","text":"I have added the below line which allows me to login without password from the localhost by starting from shell and gets me nice colours! mm0rfn host * * 255","title":"uronode.perms"},{"location":"config/linux/#uronodeannounce","text":"This has local announcements in it!","title":"uronode.announce"},{"location":"config/linux/#uronodeinfo","text":"This has information about the system in it","title":"uronode.info"},{"location":"config/linux/#uronodemotd","text":"This is the welcome message displayed on every login","title":"uronode.motd"},{"location":"config/linux/#uronodeusers","text":"This defines shell access for me as a sysop. I've never actually spawned a shell from uronode, but apparently it's possible?!","title":"uronode.users"},{"location":"config/linux/#uronode-as-a-local-interface","text":"I use uronode as my local packet radio terminal - instead of turning on and typing axcall nrnod salbbs to get to gm0nrt, I log in, type uronode, feed it my callsign and I am met with the uronode command interface, from which I can type c salbbs . It's a much nicer place to be! This required xinetd for me to set up easily.","title":"Uronode as a local interface"},{"location":"config/linux/#xinetd-config","text":"I think the below two config files are the only things required to make uronode listen on port 3964 - xinetd must be enabled and started by systemd to be listening ( systemctl enable xinetd , systemctl start xinetd ) There is probably a systemd native way of doing this, but I couldn't see that in the docs. hibby@raspberrypi:~ $ cat /etc/xinetd.d/uronode service uronode { disable = no socket_type = stream protocol = tcp user = root server = /usr/sbin/uronode wait = no instances = 20 } hibby@raspberrypi:~ $ cat /etc/services | grep uronode uronode 3694/tcp # Uronode","title":"xinetd config"},{"location":"config/linux/#fbb-bbs","text":"fbb is my BBS software of choice! It is an oddity in that it binds directly to the ports you tell it exist, so it's listening on my ax25 and netrom ports without an entry in ax25d.conf . This mostly seems like magic to me and I am happy to let it run this way! It has a few config files - fbb.conf, which is populated by the first run, ports.sys which defines the ports available and then bbs.sys and forward.sys which defines how you route to the outside world.","title":"FBB BBS"},{"location":"config/linux/#portssys","text":"My reference for this file was this website , which was a helpful resource! I have incremented the number of TNCs where appropriate and added my ports as 1,2,3. I have left the COM 1 Interface 9 etc alone. hibby@raspberrypi:~ $ cat /etc/ax25/fbb/port.sys # FBB7.0.11 # #Ports TNCs 1 3 # #Com Interface Adress (Hex) Baud 1 9 **** 9600 # #TNC NbCh Com MultCh Pacln Maxfr NbFwd MxBloc M/P-Fwd Mode Freq 0 0 0 0 0 0 0 0 00/01 ---- File-fwd. 1 8 1 uhf 250 2 1 10 00/15 XUWYL 433.6250 2 8 1 ip 250 2 1 10 00/15 XUWYL ip port 3 8 1 nrbbs 236 2 1 10 00/15 XUWYL netrom port # # End of file. #","title":"ports.sys"},{"location":"config/linux/#bbssys-forwardsys","text":"The Documentation is the best reference I've got for it, and I can't improve upon it.","title":"bbs.sys, forward.sys"},{"location":"config/linux/#running-everything","text":"I used to use systemd to bring things up, but now I run it with a bash script run as root: #!/bin/bash echo -n 'Creating socat sockets...' socat -d -d -ly pty,raw,echo=0,link=/var/ax25/pty/axip1 pty,raw,echo=0,link=/var/ax25/pty/axip2 & sleep 1 echo Done echo -n 'Starting ax25ipd' ax25ipd sleep 1 kissattach /dev/ttyACM0 uhf kissattach /var/ax25/pty/axip2 ip kissparms -c 1 -p uhf kissparms -c 1 -p ip sleep 1 echo 'Done' echo -n 'Bringing up NET/ROM runtime...' modprobe netrom nrattach nrnod nrattach nrbbs nrattach nrterm netromd -i -l -d -t 30 echo -n Starting mheard daemon... mheardd -l echo Done echo -n Starting ax25 daemon... ax25d -l echo Done echo -n 'Starting fbb' sudo fbb -f -l /home/hibby/fbb.log echo Done","title":"Running Everything"},{"location":"install/bpq/","text":"BPQ \u00b6 Set Up Repo \u00b6 If you have not already done so, set up the repo as shown here . Install \u00b6 To install LinBPQ from the repo, run the below commands: sudo apt update sudo apt install linbpq Configure \u00b6 sudo cp /usr/share/doc/linbpq/examples/bpq32.cfg /etc/bpq32.cfg sudo nano /etc/bpq32.cfg sudo chown :linbpq /etc/bpq32.cfg sudo chmod 644 /etc/bpq32.cfg","title":"BPQ"},{"location":"install/bpq/#bpq","text":"","title":"BPQ"},{"location":"install/bpq/#set-up-repo","text":"If you have not already done so, set up the repo as shown here .","title":"Set Up Repo"},{"location":"install/bpq/#install","text":"To install LinBPQ from the repo, run the below commands: sudo apt update sudo apt install linbpq","title":"Install"},{"location":"install/bpq/#configure","text":"sudo cp /usr/share/doc/linbpq/examples/bpq32.cfg /etc/bpq32.cfg sudo nano /etc/bpq32.cfg sudo chown :linbpq /etc/bpq32.cfg sudo chmod 644 /etc/bpq32.cfg","title":"Configure"},{"location":"install/linux/","text":"Linux Native Stack \u00b6 The linux native stack is highly configurable and can be easily installed on all Debian distros. Install \u00b6 To get a basic node setup, the minimum viable software is: apt install libax25 ax25-tools ax25-apps uronode BBS \u00b6 To set up a BBS install fbb apt install fbb Basic Config \u00b6 We shall set up a single AX.25 port to receive calls and display Uronode to calling stations. ax25 ports \u00b6 Set up your ax25 ports in /etc/ax25/axports The following example is for a NinoTNC: # /etc/ax25/axports # # The format of this file is: # # name callsign speed paclen window description # uhf UR0CAL-10 57600 255 2 UHF 9600bd Modify the callsign to your own or your station's call. This has to be attached as to the modem, in effect telling the computer to listen to the modem's output. Run the below as root: kissattach /dev/ttyACM0 uhf ax25d \u00b6 ax25d (ax25 daemon) listens to incoming data and directs calling stations to the application you want them to use. It can present different applications based on any combination of the callsign calling you, the callsign and SSID the calling station is calling and the port they are calling to. ax25d is controlled by /etc/ax25/ax25d.conf # /etc/ax25/ax25d.conf # # ax25d Configuration File. # # AX.25 Ports begin with a '['. # [UR0CAL-10 via uhf] NOCALL * * * * * * L default * * * * * * - root /usr/sbin/uronode uronode Note the callsign, SSID and port are aligned with the axport in this example. Similar to axports, modify UR0CAL to our own callsign or your station's callsign. ax25d is started by running the below as root: ax25d Stations should be able to call uronode on your system using AX.25.","title":"Linux Native Stack"},{"location":"install/linux/#linux-native-stack","text":"The linux native stack is highly configurable and can be easily installed on all Debian distros.","title":"Linux Native Stack"},{"location":"install/linux/#install","text":"To get a basic node setup, the minimum viable software is: apt install libax25 ax25-tools ax25-apps uronode","title":"Install"},{"location":"install/linux/#bbs","text":"To set up a BBS install fbb apt install fbb","title":"BBS"},{"location":"install/linux/#basic-config","text":"We shall set up a single AX.25 port to receive calls and display Uronode to calling stations.","title":"Basic Config"},{"location":"install/linux/#ax25-ports","text":"Set up your ax25 ports in /etc/ax25/axports The following example is for a NinoTNC: # /etc/ax25/axports # # The format of this file is: # # name callsign speed paclen window description # uhf UR0CAL-10 57600 255 2 UHF 9600bd Modify the callsign to your own or your station's call. This has to be attached as to the modem, in effect telling the computer to listen to the modem's output. Run the below as root: kissattach /dev/ttyACM0 uhf","title":"ax25 ports"},{"location":"install/linux/#ax25d","text":"ax25d (ax25 daemon) listens to incoming data and directs calling stations to the application you want them to use. It can present different applications based on any combination of the callsign calling you, the callsign and SSID the calling station is calling and the port they are calling to. ax25d is controlled by /etc/ax25/ax25d.conf # /etc/ax25/ax25d.conf # # ax25d Configuration File. # # AX.25 Ports begin with a '['. # [UR0CAL-10 via uhf] NOCALL * * * * * * L default * * * * * * - root /usr/sbin/uronode uronode Note the callsign, SSID and port are aligned with the axport in this example. Similar to axports, modify UR0CAL to our own callsign or your station's callsign. ax25d is started by running the below as root: ax25d Stations should be able to call uronode on your system using AX.25.","title":"ax25d"},{"location":"modems/direwolf/","text":"","title":"Direwolf"},{"location":"modems/ninotnc/","text":"NinoTNC \u00b6 The NinoTNC is a modern hardware modem that can come in either kit form or assembled. It connects to a computer by USB, and to a radio by a cable that is usually custom built buy the operator. It supports traditional 300, 1200 and 9600 baud packet modes as well as some more modern experimental modes designed to be more efficient that also include forward error correction. The NinoTNC has become an integral part of many new packet radio deployments in the UK and further afield. Buying one \u00b6 Information is available on the TARPN Website Ordering Page . For the UK & Ireland, boards are are available from Tom, M0LTE . Build \u00b6 The build gide for the NinoTNC is available on the TARPN Website . Operation \u00b6 The Through Hole NinoTNC has 2 banks of switches: Mode and Signals, explanation below. USB is always 57600 baud Mode Switch \u00b6 Current modes as of firmware release 3.3.1: Mode Baud bps Mod Protocol Intended mode BW Typical use 0010 9600 9600 GFSK IL2P+CRC FM 25k Current recommended mode for new 70cm (25kHz) links where both ends are compatible 0100 4800 4800 GFSK IL2P+CRC FM 12.5k Current recommended mode for new 2m (12.5kHz) links where both ends are compatible 0101 2400 2400 DPSK IL2P FM 12.5k For situations where only a speaker/mic connection is available but > 1200 baud is desired 1011 1200 2400 QPSK IL2P+CRC SSB/FM 2.4kHz HF - quadrature version of 1200 BPSK, twice the throughput for +3dB SNR. 1010 1200 1200 BPSK IL2P+CRC SSB/FM 2.4kHz HF - use for circuits where wider transmission is acceptable. 1001 300 600 QPSK IL2P+CRC SSB 500Hz HF - quadrature version of 300 BPSK, twice the throughput for +3dB SNR 1000 300 300 BPSK IL2P+CRC SSB 500Hz HF - slowest but best performing mode. ~7dB better than classic 300 baud FSK AX.25 1110 300 300 AFSK IL2P+CRC SSB 500Hz CRC improvement of IL2P 300 baud AX.25. Recommended if you can't do BPSK / QPSK on HF. Superseded (but still supported) modes: Mode Baud bps Mod Protocol Superseded By Intended mode BW Typical use 0000 9600 9600 GFSK AX.25 9600 GFSK IL2P FM 25k Backwards compatibility with legacy G3RUH modems 0001 9600 9600 GFSK IL2P 9600 GFSK IL2P+CRC FM 25k Backwards compatibility. Obsoleted by 9600 GFSK IL2P+CRC 0011 4800 4800 GFSK IL2P 4800 GFSK IL2P+CRC FM 12.5k Debugging against 4800 GFSK IL2P+CRC in case of issues with the CRC mode 1111 1200 1200 BPSK IL2P 1200 BPSK IL2P+CRC SSB/FM 2.4kHz Backwards compatibility 0111 1200 1200 AFSK IL2P 4800 GFSK IL2P+CRC FM 12.5k Improvement over 1200 AFSK IL2P, where none of the GFSK modes are possible 0110 1200 1200 AFSK AX.25 1200 AFSK IL2P FM 12.5k VHF APRS, backwards compatibility with classic / legacy TNCs like PK232 1100 300 300 AFSK AX.25 300 AFSK IL2P SSB 500Hz Backwards compatibility with legacy HF packet modems. Modulation invented c. 1962! 1101 300 300 AFSK IL2P 300 AFSK IL2P+CRC SSB 500Hz IL2P improvement of AFSK 300 baud AX.25. Prefer: * QPSK > BPSK > DPSK > AFSK * IL2P+CRC > IL2P > IL2P > AX.25 * SSB > FM Signals Switch \u00b6 Switch 1 - Transmit audio range selection - DATA/MIC \u00b6 The data / on / up position increases the TXA level so the TX-LEVEL potentiometer adjustment is in the range needed by the Data radio. The mic / off / down position reduces transmit audio to the range needed by a microphone-level-input radio. Switch 2 - Receive audio sensitivity - 1x/11x \u00b6 The on / up / 1x position is about the right level for a speaker output, and is also appropriate for a data radio output. The off / down / 11x position is used for radios which have a very low level of receive audio, e.g. perhaps when taken from a speaker mic connection. Switch 3 - Transmit audio coupling control - DC/AC \u00b6 Leave in the off / down / AC position unless you have a rare case where having the voltage into the modulator track the TNC\u2019s output, exactly, is required (DC coupling). Switch 4 - External carrier detect - EN/CD \u00b6 Leave in the off / down / CD position unless you want to provide external transmit inhibit using pin 2 of the DB9 connector.","title":"NinoTNC"},{"location":"modems/ninotnc/#ninotnc","text":"The NinoTNC is a modern hardware modem that can come in either kit form or assembled. It connects to a computer by USB, and to a radio by a cable that is usually custom built buy the operator. It supports traditional 300, 1200 and 9600 baud packet modes as well as some more modern experimental modes designed to be more efficient that also include forward error correction. The NinoTNC has become an integral part of many new packet radio deployments in the UK and further afield.","title":"NinoTNC"},{"location":"modems/ninotnc/#buying-one","text":"Information is available on the TARPN Website Ordering Page . For the UK & Ireland, boards are are available from Tom, M0LTE .","title":"Buying one"},{"location":"modems/ninotnc/#build","text":"The build gide for the NinoTNC is available on the TARPN Website .","title":"Build"},{"location":"modems/ninotnc/#operation","text":"The Through Hole NinoTNC has 2 banks of switches: Mode and Signals, explanation below. USB is always 57600 baud","title":"Operation"},{"location":"modems/ninotnc/#mode-switch","text":"Current modes as of firmware release 3.3.1: Mode Baud bps Mod Protocol Intended mode BW Typical use 0010 9600 9600 GFSK IL2P+CRC FM 25k Current recommended mode for new 70cm (25kHz) links where both ends are compatible 0100 4800 4800 GFSK IL2P+CRC FM 12.5k Current recommended mode for new 2m (12.5kHz) links where both ends are compatible 0101 2400 2400 DPSK IL2P FM 12.5k For situations where only a speaker/mic connection is available but > 1200 baud is desired 1011 1200 2400 QPSK IL2P+CRC SSB/FM 2.4kHz HF - quadrature version of 1200 BPSK, twice the throughput for +3dB SNR. 1010 1200 1200 BPSK IL2P+CRC SSB/FM 2.4kHz HF - use for circuits where wider transmission is acceptable. 1001 300 600 QPSK IL2P+CRC SSB 500Hz HF - quadrature version of 300 BPSK, twice the throughput for +3dB SNR 1000 300 300 BPSK IL2P+CRC SSB 500Hz HF - slowest but best performing mode. ~7dB better than classic 300 baud FSK AX.25 1110 300 300 AFSK IL2P+CRC SSB 500Hz CRC improvement of IL2P 300 baud AX.25. Recommended if you can't do BPSK / QPSK on HF. Superseded (but still supported) modes: Mode Baud bps Mod Protocol Superseded By Intended mode BW Typical use 0000 9600 9600 GFSK AX.25 9600 GFSK IL2P FM 25k Backwards compatibility with legacy G3RUH modems 0001 9600 9600 GFSK IL2P 9600 GFSK IL2P+CRC FM 25k Backwards compatibility. Obsoleted by 9600 GFSK IL2P+CRC 0011 4800 4800 GFSK IL2P 4800 GFSK IL2P+CRC FM 12.5k Debugging against 4800 GFSK IL2P+CRC in case of issues with the CRC mode 1111 1200 1200 BPSK IL2P 1200 BPSK IL2P+CRC SSB/FM 2.4kHz Backwards compatibility 0111 1200 1200 AFSK IL2P 4800 GFSK IL2P+CRC FM 12.5k Improvement over 1200 AFSK IL2P, where none of the GFSK modes are possible 0110 1200 1200 AFSK AX.25 1200 AFSK IL2P FM 12.5k VHF APRS, backwards compatibility with classic / legacy TNCs like PK232 1100 300 300 AFSK AX.25 300 AFSK IL2P SSB 500Hz Backwards compatibility with legacy HF packet modems. Modulation invented c. 1962! 1101 300 300 AFSK IL2P 300 AFSK IL2P+CRC SSB 500Hz IL2P improvement of AFSK 300 baud AX.25. Prefer: * QPSK > BPSK > DPSK > AFSK * IL2P+CRC > IL2P > IL2P > AX.25 * SSB > FM","title":"Mode Switch"},{"location":"modems/ninotnc/#signals-switch","text":"","title":"Signals Switch"},{"location":"modems/ninotnc/#switch-1-transmit-audio-range-selection-datamic","text":"The data / on / up position increases the TXA level so the TX-LEVEL potentiometer adjustment is in the range needed by the Data radio. The mic / off / down position reduces transmit audio to the range needed by a microphone-level-input radio.","title":"Switch 1 - Transmit audio range selection - DATA/MIC"},{"location":"modems/ninotnc/#switch-2-receive-audio-sensitivity-1x11x","text":"The on / up / 1x position is about the right level for a speaker output, and is also appropriate for a data radio output. The off / down / 11x position is used for radios which have a very low level of receive audio, e.g. perhaps when taken from a speaker mic connection.","title":"Switch 2 - Receive audio sensitivity - 1x/11x"},{"location":"modems/ninotnc/#switch-3-transmit-audio-coupling-control-dcac","text":"Leave in the off / down / AC position unless you have a rare case where having the voltage into the modulator track the TNC\u2019s output, exactly, is required (DC coupling).","title":"Switch 3 - Transmit audio coupling control - DC/AC"},{"location":"modems/ninotnc/#switch-4-external-carrier-detect-encd","text":"Leave in the off / down / CD position unless you want to provide external transmit inhibit using pin 2 of the DB9 connector.","title":"Switch 4 - External carrier detect - EN/CD"},{"location":"modems/qtsm/","text":"QtSoundModem \u00b6 hi","title":"QtSoundModem"},{"location":"modems/qtsm/#qtsoundmodem","text":"hi","title":"QtSoundModem"},{"location":"radios/","text":"Radios \u00b6 There are a huge number of radios we can use for packet radio, and they can be subdivided arbitrarily into many categories. Known good Beginner Radios \u00b6 Manufacturer Radio Band Motorola GM340 UHF Yaesu FT-7900 VHF / UHF VHF/UHF Radios \u00b6 Manufacturer Radio Band Motorola GM340 UHF Yaesu FT-7900 VHF / UHF HF Radios \u00b6 Manufacturer Radio Yaesu FT-891","title":"Radios"},{"location":"radios/#radios","text":"There are a huge number of radios we can use for packet radio, and they can be subdivided arbitrarily into many categories.","title":"Radios"},{"location":"radios/#known-good-beginner-radios","text":"Manufacturer Radio Band Motorola GM340 UHF Yaesu FT-7900 VHF / UHF","title":"Known good Beginner Radios"},{"location":"radios/#vhfuhf-radios","text":"Manufacturer Radio Band Motorola GM340 UHF Yaesu FT-7900 VHF / UHF","title":"VHF/UHF Radios"},{"location":"radios/#hf-radios","text":"Manufacturer Radio Yaesu FT-891","title":"HF Radios"},{"location":"radios/ft-7900/","text":"Yaesu FT-7900 \u00b6 The FT-7900 is an 2m & 70cm radio manufactured by Yaesu from 2010 to the present day. Bands \u00b6 Band Power Modulation 2m 0 - 50W FM 70cm 0 - 40W FM Interface \u00b6 Yaesu Mini DIN Settings \u00b6 Known Examples \u00b6 Location Band Modem Mode GB7HIB VHF Port 2m NinoTNC 1200bd IL2P","title":"Yaesu FT-7900"},{"location":"radios/ft-7900/#yaesu-ft-7900","text":"The FT-7900 is an 2m & 70cm radio manufactured by Yaesu from 2010 to the present day.","title":"Yaesu FT-7900"},{"location":"radios/ft-7900/#bands","text":"Band Power Modulation 2m 0 - 50W FM 70cm 0 - 40W FM","title":"Bands"},{"location":"radios/ft-7900/#interface","text":"Yaesu Mini DIN","title":"Interface"},{"location":"radios/ft-7900/#settings","text":"","title":"Settings"},{"location":"radios/ft-7900/#known-examples","text":"Location Band Modem Mode GB7HIB VHF Port 2m NinoTNC 1200bd IL2P","title":"Known Examples"},{"location":"radios/ft-891/","text":"Yaesu FT-891 \u00b6 The FT-891 is an HF & 6m radio manufactured by Yaesu from 2016 to the present day. Bands \u00b6 Band Power Modulation HF 0 - 100W SSB 6m 0 - 100W SSB, FM Interface \u00b6 Yaesu Mini DIN Settings \u00b6 Known Examples \u00b6 Location Band Modem Mode GB7HIB HF Port 40m NinoTNC 300bd IL2P","title":"Yaesu FT-891"},{"location":"radios/ft-891/#yaesu-ft-891","text":"The FT-891 is an HF & 6m radio manufactured by Yaesu from 2016 to the present day.","title":"Yaesu FT-891"},{"location":"radios/ft-891/#bands","text":"Band Power Modulation HF 0 - 100W SSB 6m 0 - 100W SSB, FM","title":"Bands"},{"location":"radios/ft-891/#interface","text":"Yaesu Mini DIN","title":"Interface"},{"location":"radios/ft-891/#settings","text":"","title":"Settings"},{"location":"radios/ft-891/#known-examples","text":"Location Band Modem Mode GB7HIB HF Port 40m NinoTNC 300bd IL2P","title":"Known Examples"},{"location":"radios/gm340/","text":"GM340 \u00b6 The Motorola GM340 is a commercial radio. It can be configured as VHF or UHF at the factory and supports deviation suitable for 1200bd and 9600bd. Bands \u00b6 Band Power Modulation UHF 25W FM Interface \u00b6 Settings \u00b6 Known Example \u00b6 MM0RFN is using a GM340 as the 9600bd/UHF port on GB7HIB. General programming advice from BI7JTA was followed, including connector definition.","title":"GM340"},{"location":"radios/gm340/#gm340","text":"The Motorola GM340 is a commercial radio. It can be configured as VHF or UHF at the factory and supports deviation suitable for 1200bd and 9600bd.","title":"GM340"},{"location":"radios/gm340/#bands","text":"Band Power Modulation UHF 25W FM","title":"Bands"},{"location":"radios/gm340/#interface","text":"","title":"Interface"},{"location":"radios/gm340/#settings","text":"","title":"Settings"},{"location":"radios/gm340/#known-example","text":"MM0RFN is using a GM340 as the 9600bd/UHF port on GB7HIB. General programming advice from BI7JTA was followed, including connector definition.","title":"Known Example"}]}